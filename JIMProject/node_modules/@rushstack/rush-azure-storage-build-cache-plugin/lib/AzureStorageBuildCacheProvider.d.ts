/// <reference types="node" />
import { ITerminal } from '@rushstack/node-core-library';
import { ICloudBuildCacheProvider } from '@rushstack/rush-sdk';
export declare enum AzureAuthorityHosts {
    AzureChina = "https://login.chinacloudapi.cn",
    AzureGermany = "https://login.microsoftonline.de",
    AzureGovernment = "https://login.microsoftonline.us",
    AzurePublicCloud = "https://login.microsoftonline.com"
}
export declare type AzureEnvironmentNames = keyof typeof AzureAuthorityHosts;
export interface IAzureStorageBuildCacheProviderOptions {
    storageContainerName: string;
    storageAccountName: string;
    azureEnvironment?: AzureEnvironmentNames;
    blobPrefix?: string;
    isCacheWriteAllowed: boolean;
}
export declare class AzureStorageBuildCacheProvider implements ICloudBuildCacheProvider {
    private readonly _storageAccountName;
    private readonly _storageContainerName;
    private readonly _azureEnvironment;
    private readonly _blobPrefix;
    private readonly _environmentCredential;
    private readonly _isCacheWriteAllowedByConfiguration;
    private __credentialCacheId;
    get isCacheWriteAllowed(): boolean;
    private _containerClient;
    constructor(options: IAzureStorageBuildCacheProviderOptions);
    private get _credentialCacheId();
    private get _storageAccountUrl();
    tryGetCacheEntryBufferByIdAsync(terminal: ITerminal, cacheId: string): Promise<Buffer | undefined>;
    trySetCacheEntryBufferAsync(terminal: ITerminal, cacheId: string, entryStream: Buffer): Promise<boolean>;
    updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void>;
    updateCachedCredentialInteractiveAsync(terminal: ITerminal): Promise<void>;
    deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void>;
    private _getBlobClientForCacheIdAsync;
    private _getContainerClientAsync;
    private _getSasQueryParametersAsync;
    private _getConnectionString;
}
//# sourceMappingURL=AzureStorageBuildCacheProvider.d.ts.map