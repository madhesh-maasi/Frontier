{"version":3,"file":"LocFileTypingsGenerator.js","sourceRoot":"","sources":["../src/LocFileTypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAgG;AAIhG,6DAA0D;AAc1D;;;;GAIG;AACH,MAAa,uBAAwB,SAAQ,gDAA4B;IACvE,YAAmB,OAAiC;QAClD,KAAK,iCACA,OAAO,KACV,cAAc,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,EACpD,uBAAuB,EAAE,CAAC,YAAoB,EAAE,QAAgB,EAAE,EAAE;gBAClE,MAAM,WAAW,GAAsB,6BAAa,CAAC,YAAY,CAAC;oBAChE,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,YAAY;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAS;oBACjC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;iBAC3D,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAyB,EAAE,CAAC;gBAEzC,wCAAwC;gBACxC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;oBACpC,OAAO,CAAC,IAAI,CAAC;wBACX,UAAU,EAAE,UAAU;wBACtB,OAAO,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO;qBACzC,CAAC,CAAC;iBACJ;gBAED,OAAO,EAAE,OAAO,EAAE,CAAC;YACrB,CAAC,IACD,CAAC;IACL,CAAC;CACF;AA3BD,0DA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { StringValuesTypingsGenerator, IStringValueTyping } from '@rushstack/typings-generator';\nimport { ITerminal, NewlineKind } from '@rushstack/node-core-library';\n\nimport { ILocalizationFile } from './interfaces';\nimport { LocFileParser } from './utilities/LocFileParser';\n\n/**\n * @public\n */\nexport interface ITypingsGeneratorOptions {\n  srcFolder: string;\n  generatedTsFolder: string;\n  terminal?: ITerminal;\n  exportAsDefault?: boolean;\n  globsToIgnore?: string[];\n  resxNewlineNormalization?: NewlineKind | undefined;\n}\n\n/**\n * This is a simple tool that generates .d.ts files for .loc.json, .resx.json, and .resx files.\n *\n * @public\n */\nexport class LocFileTypingsGenerator extends StringValuesTypingsGenerator {\n  public constructor(options: ITypingsGeneratorOptions) {\n    super({\n      ...options,\n      fileExtensions: ['.resx', '.resx.json', '.loc.json'],\n      parseAndGenerateTypings: (fileContents: string, filePath: string) => {\n        const locFileData: ILocalizationFile = LocFileParser.parseLocFile({\n          filePath: filePath,\n          content: fileContents,\n          terminal: this._options.terminal!,\n          resxNewlineNormalization: options.resxNewlineNormalization\n        });\n\n        const typings: IStringValueTyping[] = [];\n\n        // eslint-disable-next-line guard-for-in\n        for (const stringName in locFileData) {\n          typings.push({\n            exportName: stringName,\n            comment: locFileData[stringName].comment\n          });\n        }\n\n        return { typings };\n      }\n    });\n  }\n}\n"]}