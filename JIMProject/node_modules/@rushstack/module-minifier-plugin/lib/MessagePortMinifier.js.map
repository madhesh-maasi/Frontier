{"version":3,"file":"MessagePortMinifier.js","sourceRoot":"","sources":["../src/MessagePortMinifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAU3D;;;GAGG;AACH,MAAa,mBAAmB;IAK9B,YAAmB,IAAiB;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,MAAM,SAAS,GAA+C,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAE5F,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAmD,EAAE,EAAE;YACzE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC/B,MAAM,mBAAmB,GAAkC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC;gBACxF,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,KAAK,MAAM,QAAQ,IAAI,mBAAmB,EAAE;oBAC1C,QAAQ,CAAC,OAAO,CAAC,CAAC;iBACnB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAmC,EAAE,QAAqC;QACtF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEzB,MAAM,SAAS,GAA8C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,OAAO;SACR;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;CACF;AAvCD,kDAuCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  IModuleMinificationCallback,\n  IModuleMinificationRequest,\n  IModuleMinificationResult,\n  IModuleMinifier\n} from './ModuleMinifierPlugin.types';\nimport { MessagePort } from 'worker_threads';\n\n/**\n * Minifier implementation that outsources requests to the other side of a MessagePort\n * @public\n */\nexport class MessagePortMinifier implements IModuleMinifier {\n  public readonly port: MessagePort;\n\n  private readonly _callbacks: Map<string, IModuleMinificationCallback[]>;\n\n  public constructor(port: MessagePort) {\n    this.port = port;\n\n    const callbacks: Map<string, IModuleMinificationCallback[]> = (this._callbacks = new Map());\n\n    port.on('message', (message: IModuleMinificationResult | number | false) => {\n      if (typeof message === 'object') {\n        const callbacksForRequest: IModuleMinificationCallback[] = callbacks.get(message.hash)!;\n        callbacks.delete(message.hash);\n        for (const callback of callbacksForRequest) {\n          callback(message);\n        }\n      }\n    });\n  }\n\n  /**\n   * No-op code transform.\n   * @param request - The request to process\n   * @param callback - The callback to invoke\n   */\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\n    const { hash } = request;\n\n    const callbacks: IModuleMinificationCallback[] | undefined = this._callbacks.get(hash);\n    if (callbacks) {\n      callbacks.push(callback);\n      return;\n    }\n\n    this._callbacks.set(hash, [callback]);\n\n    this.port.postMessage(request);\n  }\n}\n"]}