{"version":3,"file":"LocalMinifier.js","sourceRoot":"","sources":["../src/LocalMinifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAQ3D,gEAA6D;AAE7D,iDAA+C;AAU/C;;;GAGG;AACH,MAAa,aAAa;IAKxB,YAAmB,OAA8B;QAC/C,MAAM,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QAE7C,IAAI,CAAC,cAAc,GAAG;YACpB,GAAG,aAAa;YAChB,MAAM,EAAE,aAAa,CAAC,MAAM;gBAC1B,CAAC,CAAC;oBACE,GAAG,aAAa,CAAC,MAAM;iBACxB;gBACH,CAAC,CAAC,EAAE;SACP,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAmC,EAAE,QAAqC;QACtF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEzB,MAAM,MAAM,GAA0C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,MAAM,EAAE;YACV,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;SACzB;QAED,IAAA,mCAAgB,EAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC;aAC3C,IAAI,CAAC,CAAC,MAAiC,EAAE,EAAE;YAC1C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACpC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,oEAAoE;YACpE,QAAQ,CAAC;gBACP,KAAK,EAAE,KAAc;gBACrB,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,SAAS;gBACd,IAAI;aACL,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAhDD,sCAgDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  IModuleMinificationCallback,\n  IModuleMinificationRequest,\n  IModuleMinificationResult,\n  IModuleMinifier\n} from './ModuleMinifierPlugin.types';\nimport { minifySingleFile } from './terser/MinifySingleFile';\nimport { MinifyOptions } from 'terser';\nimport './OverrideWebpackIdentifierAllocation';\n\n/**\n * Options for configuring the LocalMinifier\n * @public\n */\nexport interface ILocalMinifierOptions {\n  terserOptions?: MinifyOptions;\n}\n\n/**\n * Minifier implementation that minifies code on the main thread.\n * @public\n */\nexport class LocalMinifier implements IModuleMinifier {\n  private readonly _terserOptions: MinifyOptions;\n\n  private readonly _resultCache: Map<string, IModuleMinificationResult>;\n\n  public constructor(options: ILocalMinifierOptions) {\n    const { terserOptions = {} } = options || {};\n\n    this._terserOptions = {\n      ...terserOptions,\n      output: terserOptions.output\n        ? {\n            ...terserOptions.output\n          }\n        : {}\n    };\n\n    this._resultCache = new Map();\n  }\n\n  /**\n   * Transform that invokes Terser on the main thread\n   * @param request - The request to process\n   * @param callback - The callback to invoke\n   */\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\n    const { hash } = request;\n\n    const cached: IModuleMinificationResult | undefined = this._resultCache.get(hash);\n    if (cached) {\n      return callback(cached);\n    }\n\n    minifySingleFile(request, this._terserOptions)\n      .then((result: IModuleMinificationResult) => {\n        this._resultCache.set(hash, result);\n        callback(result);\n      })\n      .catch((error) => {\n        // This branch is here to satisfy the no-floating-promises lint rule\n        callback({\n          error: error as Error,\n          code: undefined,\n          map: undefined,\n          hash\n        });\n      });\n  }\n}\n"]}