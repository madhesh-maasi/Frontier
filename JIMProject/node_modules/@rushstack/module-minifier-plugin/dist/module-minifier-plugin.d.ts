import { AsyncSeriesWaterfallHook } from 'tapable';
import { Compiler } from 'webpack';
import { MinifyOptions } from 'terser';
import { Plugin } from 'webpack';
import type { RawSourceMap } from 'source-map';
import { ReplaceSource } from 'webpack-sources';
import { Source } from 'webpack-sources';
import { SyncWaterfallHook } from 'tapable';
import * as webpack from 'webpack';

/**
 * Token to replace the object or array of module definitions so that the minifier can operate on the Webpack runtime or chunk boilerplate in isolation
 * @public
 */
export declare const CHUNK_MODULES_TOKEN: '__WEBPACK_CHUNK_MODULES__';

/**
 * Generates a companion asset containing all extracted comments. If it is non-empty, returns a banner comment directing users to said companion asset.
 *
 * @param compilation - The webpack compilation
 * @param asset - The asset to process
 * @param minifiedModules - The minified modules to pull comments from
 * @param assetName - The name of the asset
 * @public
 */
export declare function generateLicenseFileForAsset(compilation: webpack.compilation.Compilation, asset: IAssetInfo, minifiedModules: IModuleMap): string;

/**
 * Gets a base54 string suitable for use as a JavaScript identifier, omitting those that are valid ECMAScript keywords
 *
 * @param ordinal - The number to convert to a base54 identifier
 *
 * @public
 */
export declare function getIdentifier(ordinal: number): string;

/**
 * The comment objects from the Acorn parser inside of webpack
 * @internal
 */
export declare interface _IAcornComment {
    type: 'Line' | 'Block';
    value: string;
    start: number;
    end: number;
}

/**
 * Information about a dehydrated webpack ECMAScript asset
 * @public
 */
export declare interface IAssetInfo {
    /**
     * The (minified) boilerplate code for the asset. Will contain a token to be replaced by the minified modules.
     */
    source: Source;
    /**
     * The name of the asset, used to index into compilation.assets
     */
    fileName: string;
    /**
     * The ids of the modules that are part of the chunk corresponding to this asset
     */
    modules: (string | number)[];
    /**
     * The raw chunk object from Webpack, in case information from it is necessary for reconstruction
     */
    chunk: webpack.compilation.Chunk;
    /**
     * The set of external names to postprocess
     */
    externalNames: Map<string, string>;
}

/**
 * A map from file names to dehydrated assets
 * @public
 */
export declare type IAssetMap = Map<string, IAssetInfo>;

/**
 * The set of data remaining to rehydrate in the current compilation
 * @public
 */
export declare interface IDehydratedAssets {
    /**
     * The set of remaining assets to rehydrate. Each tap may remove some or all assets from this collection
     */
    assets: IAssetMap;
    /**
     * The set of modules to use for rehydrating assets.
     */
    modules: IModuleMap;
}

/**
 * The sorted sequence of leading digits for mangled identifiers
 * Computed from character frequency analysis of the source code for OneDrive
 * @public
 */
export declare const IDENTIFIER_LEADING_DIGITS: string;

/**
 * The sorted sequence of trailing digits for mangled identifiers
 * Computed from character frequency analysis of the source code for OneDrive
 * @public
 */
export declare const IDENTIFIER_TRAILING_DIGITS: string;

/**
 * Extension of the webpack Module typings with members that are used by this Plugin
 * @public
 */
export declare interface IExtendedModule extends webpack.compilation.Module {
    /**
     * Is this module external?
     */
    external?: boolean;
    /**
     * Concatenated modules
     */
    modules?: IExtendedModule[];
    /**
     * Id for the module
     */
    id: string | number | null;
    /**
     * Gets a descriptive identifier for the module.
     */
    identifier(): string;
    /**
     * Gets a friendly identifier for the module.
     */
    readableIdentifier(requestShortener: unknown): string;
    /**
     * Path to the physical file this module represents
     */
    resource?: string;
}

/**
 * Options for configuring the LocalMinifier
 * @public
 */
export declare interface ILocalMinifierOptions {
    terserOptions?: MinifyOptions;
}

/**
 * Information about a minified module
 * @public
 */
export declare interface IModuleInfo {
    /**
     * The (minified) code of this module. Will be a function expression.
     */
    source: Source;
    /**
     * The raw module object from Webpack, in case information from it is necessary for reconstruction
     */
    module: IExtendedModule;
}

/**
 * A map from module ids to minified modules
 * @public
 */
export declare type IModuleMap = Map<string | number, IModuleInfo>;

/**
 * Callback passed to a minifier function
 * @public
 */
export declare interface IModuleMinificationCallback {
    (result: IModuleMinificationResult): void;
}

/**
 * Result from the minifier function when an error is encountered.
 * @public
 */
export declare interface IModuleMinificationErrorResult {
    /**
     * Identity of the request
     */
    hash: string;
    /**
     * The error encountered, to be added to the current compilation's error collection.
     */
    error: Error;
    /**
     * Marker property to always return the same result shape.
     */
    code?: undefined;
    /**
     * Marker property to always return the same result shape.
     */
    map?: undefined;
}

/**
 * Request to the minifier
 * @public
 */
export declare interface IModuleMinificationRequest {
    /**
     * Identity of the request. Will be included in the response.
     */
    hash: string;
    /**
     * The raw code fragment
     */
    code: string;
    /**
     * File name to show for the source code in the source map
     */
    nameForMap: string | undefined;
    /**
     * Reserved variable names, e.g. __WEBPACK_EXTERNAL_MODULE_1__
     */
    externals: string[] | undefined;
}

/**
 * Result from the minifier.
 * @public
 */
export declare type IModuleMinificationResult = IModuleMinificationErrorResult | IModuleMinificationSuccessResult;

/**
 * Result from the minifier on a successful minification.
 * @public
 */
export declare interface IModuleMinificationSuccessResult {
    /**
     * Identity of the request
     */
    hash: string;
    /**
     * The error property being `undefined` indicates success.
     */
    error: undefined;
    /**
     * The minified code.
     */
    code: string;
    /**
     * Marker property to always return the same result shape.
     */
    map?: RawSourceMap;
}

/**
 * Object that can be invoked to minify code.
 * @public
 */
export declare interface IModuleMinifier {
    minify: IModuleMinifierFunction;
    /**
     * Prevents the minifier from shutting down until the returned callback is invoked.
     * The callback may be used to surface errors encountered by the minifier that may not be relevant to a specific file.
     * It should be called to allow the minifier to cleanup
     */
    ref?(): () => Promise<void>;
}

/**
 * An async function called to minify a module (or dehydrated chunk)
 * @public
 */
export declare interface IModuleMinifierFunction {
    (request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
}

/**
 * Hooks provided by the ModuleMinifierPlugin
 * @public
 */
export declare interface IModuleMinifierPluginHooks {
    /**
     * Hook invoked at the start of optimizeChunkAssets to rehydrate the minified boilerplate and runtime into chunk assets.
     */
    rehydrateAssets: AsyncSeriesWaterfallHook<IDehydratedAssets, webpack.compilation.Compilation>;
    /**
     * Hook invoked on a module id to get the final rendered id.
     */
    finalModuleId: SyncWaterfallHook<string | number | undefined>;
    /**
     * Hook invoked on code after it has been returned from the minifier.
     */
    postProcessCodeFragment: SyncWaterfallHook<ReplaceSource, string>;
}

/**
 * Options to the ModuleMinifierPlugin constructor
 * @public
 */
export declare interface IModuleMinifierPluginOptions {
    /**
     * Minifier implementation to use. Required.
     */
    minifier: IModuleMinifier;
    /**
     * Whether to enable source map processing. If not provided, will attempt to guess based on `mode` and `devtool` in the webpack config.
     * Set to `false` for faster builds at the expense of debuggability.
     */
    sourceMap?: boolean;
    /**
     * Instructs the plugin to alter the code of modules to maximize portability across compilations.
     */
    usePortableModules?: boolean;
}

/**
 * This is the second parameter to the NormalModuleFactory `module` hook
 * @internal
 */
export declare interface _INormalModuleFactoryModuleData {
    resourceResolveData?: {
        /**
         * Contents of the description file (package.json) for the module
         */
        descriptionFileData?: {
            /**
             * The name of the package
             */
            name: string;
        };
        /**
         * Absolute path of the description file (package.json) for the module
         */
        descriptionFilePath?: string;
        /**
         * Absolute path of the directory containing the description file (package.json) for the module
         */
        descriptionFileRoot?: string;
        /**
         * Relative path from the description file (package.json) to the module
         */
        relativePath?: string;
    };
}

/**
 * This is the second parameter to the thisCompilation and compilation webpack.Compiler hooks.
 * @internal
 */
export declare interface _IWebpackCompilationData {
    normalModuleFactory: webpack.compilation.NormalModuleFactory;
}

/**
 * Options for configuring the WorkerPoolMinifier
 * @public
 */
export declare interface IWorkerPoolMinifierOptions {
    /**
     * Maximum number of worker threads to use. Will never use more than there are modules to process.
     * Defaults to os.cpus().length
     */
    maxThreads?: number;
    /**
     * The options to forward to Terser.
     * `output.comments` is currently not configurable and will always extract license comments to a separate file.
     */
    terserOptions?: MinifyOptions;
    /**
     * If true, log to the console about the minification results.
     */
    verbose?: boolean;
}

/**
 * Minifier implementation that minifies code on the main thread.
 * @public
 */
export declare class LocalMinifier implements IModuleMinifier {
    private readonly _terserOptions;
    private readonly _resultCache;
    constructor(options: ILocalMinifierOptions);
    /**
     * Transform that invokes Terser on the main thread
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
}

/**
 * Prefix to wrap `function (module, __webpack_exports__, __webpack_require__) { ... }` so that the minifier doesn't delete it.
 * Public because alternate Minifier implementations may wish to know about it.
 * @public
 */
export declare const MODULE_WRAPPER_PREFIX: '__MINIFY_MODULE__(';

/**
 * Suffix to wrap `function (module, __webpack_exports__, __webpack_require__) { ... }` so that the minifier doesn't delete it.
 * Public because alternate Minifier implementations may wish to know about it.
 * @public
 */
export declare const MODULE_WRAPPER_SUFFIX: ');';

/**
 * Webpack plugin that minifies code on a per-module basis rather than per-asset. The actual minification is handled by the input `minifier` object.
 * @public
 */
export declare class ModuleMinifierPlugin implements webpack.Plugin {
    readonly hooks: IModuleMinifierPluginHooks;
    minifier: IModuleMinifier;
    private readonly _portableIdsPlugin;
    private readonly _sourceMap;
    constructor(options: IModuleMinifierPluginOptions);
    apply(compiler: webpack.Compiler): void;
}

/**
 * Minifier implementation that does not actually transform the code, for debugging.
 * @public
 */
export declare class NoopMinifier implements IModuleMinifier {
    /**
     * No-op code transform.
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
}

/**
 * Plugin responsible for converting the Webpack module ids (of whatever variety) to stable ids before code is handed to the minifier, then back again.
 * Uses the node module identity of the target module. Will emit an error if it encounters multiple versions of the same package in the same compilation.
 * @public
 */
export declare class PortableMinifierModuleIdsPlugin implements Plugin {
    private readonly _minifierHooks;
    constructor(minifierHooks: IModuleMinifierPluginHooks);
    apply(compiler: Compiler): void;
}

/**
 * Rehydrates an asset with minified modules.
 * @param asset - The asset
 * @param moduleMap - The minified modules
 * @param banner - A banner to inject for license information
 * @public
 */
export declare function rehydrateAsset(asset: IAssetInfo, moduleMap: IModuleMap, banner: string): Source;

/**
 * Stage # to use when this should be the last tap in the hook
 * @public
 */
export declare const STAGE_AFTER: 100;

/**
 * Stage # to use when this should be the first tap in the hook
 * @public
 */
export declare const STAGE_BEFORE: -100;

/**
 * Minifier implementation that uses a thread pool for minification.
 * @public
 */
export declare class WorkerPoolMinifier implements IModuleMinifier {
    private readonly _pool;
    private readonly _verbose;
    private _refCount;
    private _deduped;
    private _minified;
    private readonly _resultCache;
    private readonly _activeRequests;
    constructor(options: IWorkerPoolMinifierOptions);
    get maxThreads(): number;
    set maxThreads(threads: number);
    /**
     * Transform code by farming it out to a worker pool.
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
    ref(): () => Promise<void>;
}

export { }
