"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const RUSH_LIB_NAME = '@microsoft/rush-lib';
// SCENARIO 1:  Rush's PluginManager has initialized "rush-sdk" with Rush's own instance of rush-lib.
// The Rush host process will assign "global.___rush___rushLibModule" before loading the plugin.
let rushLibModule = global.___rush___rushLibModule;
// SCENARIO 2:  The project importing "rush-sdk" has installed its own instance of "rush-lib"
// as a package.json dependency.  For example, this is used by the Jest tests for Rush plugins.
if (rushLibModule === undefined) {
    const importingPath = (_a = module === null || module === void 0 ? void 0 : module.parent) === null || _a === void 0 ? void 0 : _a.filename;
    if (importingPath !== undefined) {
        const callerPackageFolder = node_core_library_1.PackageJsonLookup.instance.tryGetPackageFolderFor(importingPath);
        if (callerPackageFolder !== undefined) {
            const callerPackageJson = require(path.join(callerPackageFolder, 'package.json'));
            // Does the caller properly declare a dependency on rush-lib?
            if ((callerPackageJson.dependencies && callerPackageJson.dependencies[RUSH_LIB_NAME] !== undefined) ||
                (callerPackageJson.devDependencies &&
                    callerPackageJson.devDependencies[RUSH_LIB_NAME] !== undefined) ||
                (callerPackageJson.peerDependencies &&
                    callerPackageJson.peerDependencies[RUSH_LIB_NAME] !== undefined)) {
                // Try to resolve rush-lib from the caller's folder
                try {
                    const rushLibModulePath = node_core_library_1.Import.resolveModule({
                        modulePath: RUSH_LIB_NAME,
                        baseFolderPath: callerPackageFolder
                    });
                    rushLibModule = require(rushLibModulePath);
                }
                catch (error) {
                    // If we fail to resolve it, ignore the error
                }
                // If two different libraries invoke `rush-sdk`, and one of them provides "rush-lib"
                // then the first version to be loaded wins.  We do not support side-by-side instances of "rush-lib".
                if (rushLibModule !== undefined) {
                    // TODO: When we implement Scenario 3, we should also add some diagnostic state
                    // to track which scenario is active and how it got initialized.
                    global.___rush___rushLibModule = rushLibModule;
                }
            }
        }
    }
}
// SCENARIO 3:  A tool or script depends on "rush-sdk", and is meant to be used inside a monorepo folder.
// In this case, we can use install-run-rush.js to obtain the appropriate rush-lib version for the monorepo.
//
// NOT IMPLEMENTED YET
if (rushLibModule === undefined) {
    // This error indicates that a project is trying to import "@rushstack/rush-sdk", but the Rush engine
    // instance cannot be found.  If you are writing Jest tests for a Rush plugin, add "@microsoft/rush-lib"
    // to the devDependencies for your project.
    throw new Error('The "@rushstack/rush-sdk" package context has not been initialized.');
}
// Based on TypeScript's __exportStar()
for (const property in rushLibModule) {
    if (property !== 'default' && !exports.hasOwnProperty(property)) {
        const rushLibModuleForClosure = rushLibModule;
        // Based on TypeScript's __createBinding()
        Object.defineProperty(exports, property, {
            enumerable: true,
            get: function () {
                return rushLibModuleForClosure[property];
            }
        });
    }
}
//# sourceMappingURL=index.js.map