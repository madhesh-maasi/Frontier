{"version":3,"file":"AmazonS3Client.js","sourceRoot":"","sources":["../src/AmazonS3Client.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as crypto from 'crypto';\nimport * as fetch from 'node-fetch';\n\nimport { IAmazonS3BuildCacheProviderOptions } from './AmazonS3BuildCacheProvider';\nimport { IGetFetchOptions, IPutFetchOptions, WebClient } from './WebClient';\n\nconst CONTENT_HASH_HEADER_NAME: 'x-amz-content-sha256' = 'x-amz-content-sha256';\nconst DATE_HEADER_NAME: 'x-amz-date' = 'x-amz-date';\nconst HOST_HEADER_NAME: 'host' = 'host';\nconst SECURITY_TOKEN_HEADER_NAME: 'x-amz-security-token' = 'x-amz-security-token';\n\nconst DEFAULT_S3_REGION: 'us-east-1' = 'us-east-1';\n\nexport interface IAmazonS3Credentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string | undefined;\n}\n\ninterface IIsoDateString {\n  date: string;\n  dateTime: string;\n}\n\nexport class AmazonS3Client {\n  private readonly _credentials: IAmazonS3Credentials | undefined;\n  private readonly _s3Bucket: string;\n  private readonly _s3Region: string;\n\n  private readonly _webClient: WebClient;\n\n  public constructor(\n    credentials: IAmazonS3Credentials | undefined,\n    options: IAmazonS3BuildCacheProviderOptions,\n    webClient: WebClient\n  ) {\n    this._credentials = credentials;\n\n    this._validateBucketName(options.s3Bucket);\n\n    this._s3Bucket = options.s3Bucket;\n    this._s3Region = options.s3Region;\n\n    this._webClient = webClient;\n  }\n\n  public static tryDeserializeCredentials(\n    credentialString: string | undefined\n  ): IAmazonS3Credentials | undefined {\n    if (!credentialString) {\n      return undefined;\n    }\n\n    const fields: string[] = credentialString.split(':');\n    if (fields.length < 2 || fields.length > 3) {\n      throw new Error('Amazon S3 credential is in an unexpected format.');\n    }\n\n    return {\n      accessKeyId: fields[0],\n      secretAccessKey: fields[1],\n      sessionToken: fields[2]\n    };\n  }\n\n  public async getObjectAsync(objectName: string): Promise<Buffer | undefined> {\n    const response: fetch.Response = await this._makeRequestAsync('GET', objectName);\n    if (response.ok) {\n      return await response.buffer();\n    } else if (response.status === 404) {\n      return undefined;\n    } else if (response.status === 403 && !this._credentials) {\n      return undefined;\n    } else {\n      this._throwS3Error(response);\n    }\n  }\n\n  public async uploadObjectAsync(objectName: string, objectBuffer: Buffer): Promise<void> {\n    if (!this._credentials) {\n      throw new Error('Credentials are required to upload objects to S3.');\n    }\n\n    const response: fetch.Response = await this._makeRequestAsync('PUT', objectName, objectBuffer);\n    if (!response.ok) {\n      this._throwS3Error(response);\n    }\n  }\n\n  private async _makeRequestAsync(\n    verb: 'GET' | 'PUT',\n    objectName: string,\n    body?: Buffer\n  ): Promise<fetch.Response> {\n    const isoDateString: IIsoDateString = this._getIsoDateString();\n    const bodyHash: string = this._getSha256(body);\n    const host: string = this._getHost();\n    const headers: fetch.Headers = new fetch.Headers();\n    headers.set(DATE_HEADER_NAME, isoDateString.dateTime);\n    headers.set(CONTENT_HASH_HEADER_NAME, bodyHash);\n\n    if (this._credentials) {\n      // Compute the authorization header. See https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n      const signedHeaderNames: string[] = [HOST_HEADER_NAME, CONTENT_HASH_HEADER_NAME, DATE_HEADER_NAME];\n      const canonicalHeaders: string[] = [\n        `${HOST_HEADER_NAME}:${host}`,\n        `${CONTENT_HASH_HEADER_NAME}:${bodyHash}`,\n        `${DATE_HEADER_NAME}:${isoDateString.dateTime}`\n      ];\n\n      // Handle signing with temporary credentials (via sts:assume-role)\n      if (this._credentials.sessionToken) {\n        signedHeaderNames.push(SECURITY_TOKEN_HEADER_NAME);\n        canonicalHeaders.push(`${SECURITY_TOKEN_HEADER_NAME}:${this._credentials.sessionToken}`);\n      }\n\n      const signedHeaderNamesString: string = signedHeaderNames.join(';');\n\n      // The canonical request looks like this:\n      //  GET\n      // /test.txt\n      //\n      // host:examplebucket.s3.amazonaws.com\n      // range:bytes=0-9\n      // x-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n      // x-amz-date:20130524T000000Z\n      //\n      // host;range;x-amz-content-sha256;x-amz-date\n      // e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n      const canonicalRequest: string = [\n        verb,\n        `/${objectName}`,\n        '', // we don't use query strings for these requests\n        ...canonicalHeaders,\n        '',\n        signedHeaderNamesString,\n        bodyHash\n      ].join('\\n');\n      const canonicalRequestHash: string = this._getSha256(canonicalRequest);\n\n      const scope: string = `${isoDateString.date}/${this._s3Region}/s3/aws4_request`;\n      // The string to sign looks like this:\n      // AWS4-HMAC-SHA256\n      // 20130524T423589Z\n      // 20130524/us-east-1/s3/aws4_request\n      // 7344ae5b7ee6c3e7e6b0fe0640412a37625d1fbfff95c48bbb2dc43964946972\n      const stringToSign: string = [\n        'AWS4-HMAC-SHA256',\n        isoDateString.dateTime,\n        scope,\n        canonicalRequestHash\n      ].join('\\n');\n\n      const dateKey: Buffer = this._getSha256Hmac(\n        `AWS4${this._credentials.secretAccessKey}`,\n        isoDateString.date\n      );\n      const dateRegionKey: Buffer = this._getSha256Hmac(dateKey, this._s3Region);\n      const dateRegionServiceKey: Buffer = this._getSha256Hmac(dateRegionKey, 's3');\n      const signingKey: Buffer = this._getSha256Hmac(dateRegionServiceKey, 'aws4_request');\n      const signature: string = this._getSha256Hmac(signingKey, stringToSign, 'hex');\n\n      const authorizationHeader: string = `AWS4-HMAC-SHA256 Credential=${this._credentials.accessKeyId}/${scope},SignedHeaders=${signedHeaderNamesString},Signature=${signature}`;\n\n      headers.set('Authorization', authorizationHeader);\n      if (this._credentials.sessionToken) {\n        // Handle signing with temporary credentials (via sts:assume-role)\n        headers.set('X-Amz-Security-Token', this._credentials.sessionToken);\n      }\n    }\n\n    const webFetchOptions: IGetFetchOptions | IPutFetchOptions = {\n      verb,\n      headers\n    };\n    if (verb === 'PUT') {\n      (webFetchOptions as IPutFetchOptions).body = body;\n    }\n\n    const response: fetch.Response = await this._webClient.fetchAsync(\n      `https://${host}/${objectName}`,\n      webFetchOptions\n    );\n\n    return response;\n  }\n\n  public _getSha256Hmac(key: string | Buffer, data: string): Buffer;\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding: 'hex'): string;\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding?: 'hex'): Buffer | string {\n    const hash: crypto.Hash = crypto.createHmac('sha256', key);\n    hash.update(data);\n    if (encoding) {\n      return hash.digest(encoding);\n    } else {\n      return hash.digest();\n    }\n  }\n\n  private _getSha256(data?: string | Buffer): string {\n    if (data) {\n      const hash: crypto.Hash = crypto.createHash('sha256');\n      hash.update(data);\n      return hash.digest('hex');\n    } else {\n      // This is the null SHA256 hash\n      return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\n    }\n  }\n\n  private _getIsoDateString(date: Date = new Date()): IIsoDateString {\n    let dateString: string = date.toISOString();\n    dateString = dateString.replace(/[-:]/g, ''); // Remove separator characters\n    dateString = dateString.substring(0, 15); // Drop milliseconds\n\n    // dateTime is an ISO8601 date. It looks like \"20130524T423589\"\n    // date is an ISO date. It looks like \"20130524\"\n    return {\n      dateTime: `${dateString}Z`,\n      date: dateString.substring(0, 8)\n    };\n  }\n\n  private _throwS3Error(response: fetch.Response): never {\n    throw new Error(`Amazon S3 responded with status code ${response.status} (${response.statusText})`);\n  }\n\n  private _getHost(): string {\n    if (this._s3Region === DEFAULT_S3_REGION) {\n      return `${this._s3Bucket}.s3.amazonaws.com`;\n    } else {\n      return `${this._s3Bucket}.s3-${this._s3Region}.amazonaws.com`;\n    }\n  }\n\n  /**\n   * Validates a S3 bucket name.\n   * {@link https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html}\n   */\n  private _validateBucketName(s3BucketName: string): void {\n    if (!s3BucketName) {\n      throw new Error('A S3 bucket name must be provided');\n    }\n\n    if (!s3BucketName.match(/^[a-z\\d-.]{3,63}$/)) {\n      throw new Error(\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must only contain lowercase ` +\n          'alphanumerical characters, dashes, and periods and must be between 3 and 63 characters long.'\n      );\n    }\n\n    if (!s3BucketName.match(/^[a-z\\d]/)) {\n      throw new Error(\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must start with a lowercase ` +\n          'alphanumerical character.'\n      );\n    }\n\n    if (s3BucketName.match(/-$/)) {\n      throw new Error(\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not end in a dash.`\n      );\n    }\n\n    if (s3BucketName.match(/(\\.\\.)|(\\.-)|(-\\.)/)) {\n      throw new Error(\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not have consecutive periods or ` +\n          'dashes adjacent to periods.'\n      );\n    }\n\n    if (s3BucketName.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n      throw new Error(\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not be formatted as an IP address.`\n      );\n    }\n  }\n}\n"]}