{"version":3,"file":"AmazonS3BuildCacheProvider.js","sourceRoot":"","sources":["../src/AmazonS3BuildCacheProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminal } from '@rushstack/node-core-library';\nimport {\n  ICloudBuildCacheProvider,\n  ICredentialCacheEntry,\n  CredentialCache,\n  RushSession,\n  RushConstants,\n  EnvironmentVariableNames,\n  EnvironmentConfiguration\n} from '@rushstack/rush-sdk';\n\nimport { AmazonS3Client, IAmazonS3Credentials } from './AmazonS3Client';\nimport { WebClient } from './WebClient';\n\nexport interface IAmazonS3BuildCacheProviderOptions {\n  s3Bucket: string;\n  s3Region: string;\n  s3Prefix?: string;\n  isCacheWriteAllowed: boolean;\n}\n\nexport class AmazonS3BuildCacheProvider implements ICloudBuildCacheProvider {\n  private readonly _options: IAmazonS3BuildCacheProviderOptions;\n  private readonly _s3Prefix: string | undefined;\n  private readonly _environmentCredential: string | undefined;\n  private readonly _isCacheWriteAllowedByConfiguration: boolean;\n  private __credentialCacheId: string | undefined;\n  private _rushSession: RushSession;\n\n  public get isCacheWriteAllowed(): boolean {\n    return EnvironmentConfiguration.buildCacheWriteAllowed ?? this._isCacheWriteAllowedByConfiguration;\n  }\n\n  private __s3Client: AmazonS3Client | undefined;\n\n  public constructor(options: IAmazonS3BuildCacheProviderOptions, rushSession: RushSession) {\n    this._rushSession = rushSession;\n    this._options = options;\n    this._s3Prefix = options.s3Prefix;\n    this._environmentCredential = EnvironmentConfiguration.buildCacheCredential;\n    this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;\n  }\n\n  private get _credentialCacheId(): string {\n    if (!this.__credentialCacheId) {\n      const cacheIdParts: string[] = ['aws-s3', this._options.s3Region, this._options.s3Bucket];\n\n      if (this._isCacheWriteAllowedByConfiguration) {\n        cacheIdParts.push('cacheWriteAllowed');\n      }\n\n      this.__credentialCacheId = cacheIdParts.join('|');\n    }\n\n    return this.__credentialCacheId;\n  }\n\n  private async _getS3ClientAsync(): Promise<AmazonS3Client> {\n    if (!this.__s3Client) {\n      let credentials: IAmazonS3Credentials | undefined = AmazonS3Client.tryDeserializeCredentials(\n        this._environmentCredential\n      );\n\n      if (!credentials) {\n        let cacheEntry: ICredentialCacheEntry | undefined;\n        await CredentialCache.usingAsync(\n          {\n            supportEditing: false\n          },\n          (credentialsCache: CredentialCache) => {\n            cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);\n          }\n        );\n\n        if (cacheEntry) {\n          const expirationTime: number | undefined = cacheEntry.expires?.getTime();\n          if (expirationTime && expirationTime < Date.now()) {\n            throw new Error(\n              'Cached Amazon S3 credentials have expired. ' +\n                `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\".`\n            );\n          } else {\n            credentials = AmazonS3Client.tryDeserializeCredentials(cacheEntry?.credential);\n          }\n        } else if (this._isCacheWriteAllowedByConfiguration) {\n          throw new Error(\n            \"An Amazon S3 credential hasn't been provided, or has expired. \" +\n              `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\", ` +\n              `or provide an <AccessKeyId>:<SecretAccessKey> pair in the ` +\n              `${EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL} environment variable`\n          );\n        }\n      }\n\n      this.__s3Client = new AmazonS3Client(credentials, this._options, new WebClient());\n    }\n\n    return this.__s3Client;\n  }\n\n  public async tryGetCacheEntryBufferByIdAsync(\n    terminal: ITerminal,\n    cacheId: string\n  ): Promise<Buffer | undefined> {\n    try {\n      const client: AmazonS3Client = await this._getS3ClientAsync();\n      return await client.getObjectAsync(this._s3Prefix ? `${this._s3Prefix}/${cacheId}` : cacheId);\n    } catch (e) {\n      terminal.writeWarningLine(`Error getting cache entry from S3: ${e}`);\n      return undefined;\n    }\n  }\n\n  public async trySetCacheEntryBufferAsync(\n    terminal: ITerminal,\n    cacheId: string,\n    objectBuffer: Buffer\n  ): Promise<boolean> {\n    if (!this.isCacheWriteAllowed) {\n      terminal.writeErrorLine('Writing to S3 cache is not allowed in the current configuration.');\n      return false;\n    }\n\n    try {\n      const client: AmazonS3Client = await this._getS3ClientAsync();\n      await client.uploadObjectAsync(this._s3Prefix ? `${this._s3Prefix}/${cacheId}` : cacheId, objectBuffer);\n      return true;\n    } catch (e) {\n      terminal.writeWarningLine(`Error uploading cache entry to S3: ${e}`);\n      return false;\n    }\n  }\n\n  public async updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void> {\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: true\n      },\n      async (credentialsCache: CredentialCache) => {\n        credentialsCache.setCacheEntry(this._credentialCacheId, credential);\n        await credentialsCache.saveIfModifiedAsync();\n      }\n    );\n  }\n\n  public async updateCachedCredentialInteractiveAsync(terminal: ITerminal): Promise<void> {\n    throw new Error(\n      'The interactive cloud credentials flow is not supported for Amazon S3.\\n' +\n        'Provide your credentials to rush using the --credential flag instead. Credentials must be ' +\n        'in the form of <ACCESS KEY ID>:<SECRET ACCESS KEY> or ' +\n        '<ACCESS KEY ID>:<SECRET ACCESS KEY>:<SESSION TOKEN>.'\n    );\n  }\n\n  public async deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void> {\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: true\n      },\n      async (credentialsCache: CredentialCache) => {\n        credentialsCache.deleteCacheEntry(this._credentialCacheId);\n        await credentialsCache.saveIfModifiedAsync();\n      }\n    );\n  }\n}\n"]}