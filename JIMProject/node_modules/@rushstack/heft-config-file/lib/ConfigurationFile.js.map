{"version":3,"file":"ConfigurationFile.js","sourceRoot":"","sources":["../src/ConfigurationFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as nodeJsPath from 'path';\nimport { JSONPath } from 'jsonpath-plus';\nimport {\n  JsonSchema,\n  JsonFile,\n  PackageJsonLookup,\n  Import,\n  FileSystem,\n  ITerminal\n} from '@rushstack/node-core-library';\nimport { RigConfig } from '@rushstack/rig-package';\n\ninterface IConfigurationJson {\n  extends?: string;\n}\n\n/**\n * @beta\n */\nexport enum InheritanceType {\n  /**\n   * Append additional elements after elements from the parent file's property\n   */\n  append = 'append',\n\n  /**\n   * Discard elements from the parent file's property\n   */\n  replace = 'replace',\n\n  /**\n   * Custom inheritance functionality\n   */\n  custom = 'custom'\n}\n\n/**\n * @beta\n */\nexport enum PathResolutionMethod {\n  /**\n   * Resolve a path relative to the configuration file\n   */\n  resolvePathRelativeToConfigurationFile,\n\n  /**\n   * Resolve a path relative to the root of the project containing the configuration file\n   */\n  resolvePathRelativeToProjectRoot,\n\n  /**\n   * Treat the property as a NodeJS-style require/import reference and resolve using standard\n   * NodeJS filesystem resolution\n   */\n  NodeResolve,\n\n  /**\n   * Resolve the property using a custom resolver.\n   */\n  custom\n}\n\nconst CONFIGURATION_FILE_FIELD_ANNOTATION: unique symbol = Symbol('configuration-file-field-annotation');\n\ninterface IAnnotatedField<TField> {\n  [CONFIGURATION_FILE_FIELD_ANNOTATION]: IConfigurationFileFieldAnnotation<TField>;\n}\n\ninterface IConfigurationFileFieldAnnotation<TField> {\n  configurationFilePath: string | undefined;\n  originalValues: { [propertyName in keyof TField]: unknown };\n}\n\n/**\n * Used to specify how node(s) in a JSON object should be processed after being loaded.\n *\n * @beta\n */\nexport interface IJsonPathMetadata {\n  /**\n   * If `IJsonPathMetadata.pathResolutionMethod` is set to `PathResolutionMethod.custom`,\n   * this property be used to resolve the path.\n   */\n  customResolver?: (configurationFilePath: string, propertyName: string, propertyValue: string) => string;\n\n  /**\n   * If this property describes a filesystem path, use this property to describe\n   * how the path should be resolved.\n   */\n  pathResolutionMethod?: PathResolutionMethod;\n}\n\n/**\n * @beta\n */\nexport type PropertyInheritanceCustomFunction<TObject> = (\n  currentObject: TObject,\n  parentObject: TObject\n) => TObject;\n\n/**\n * @beta\n */\nexport interface IPropertyInheritance<TInheritanceType extends InheritanceType> {\n  inheritanceType: TInheritanceType;\n}\n\n/**\n * @beta\n */\nexport interface ICustomPropertyInheritance<TObject> extends IPropertyInheritance<InheritanceType.custom> {\n  /**\n   * Provides a custom inheritance function. This function takes two arguments: the first is the\n   * child file's object, and the second is the parent file's object. The function should return\n   * the resulting combined object.\n   */\n  inheritanceFunction: PropertyInheritanceCustomFunction<TObject>;\n}\n\n/**\n * @beta\n */\nexport type IPropertiesInheritance<TConfigurationFile> = {\n  [propertyName in keyof TConfigurationFile]?:\n    | IPropertyInheritance<InheritanceType.append | InheritanceType.replace>\n    | ICustomPropertyInheritance<TConfigurationFile[propertyName]>;\n};\n\n/**\n * Keys in this object are JSONPaths {@link https://jsonpath.com/}, and values are objects\n * that describe how node(s) selected by the JSONPath are processed after loading.\n *\n * @beta\n */\nexport interface IJsonPathsMetadata {\n  [jsonPath: string]: IJsonPathMetadata;\n}\n\n/**\n * @beta\n */\nexport interface IConfigurationFileOptions<TConfigurationFile> {\n  /**\n   * A project root-relative path to the configuration file that should be loaded.\n   */\n  projectRelativeFilePath: string;\n\n  /**\n   * The path to the schema for the configuration file.\n   */\n  jsonSchemaPath: string;\n\n  /**\n   * Use this property to specify how JSON nodes are postprocessed.\n   */\n  jsonPathMetadata?: IJsonPathsMetadata;\n\n  /**\n   * Use this property to control how root-level properties are handled between parent and child\n   * configuration files.\n   */\n  propertyInheritance?: IPropertiesInheritance<TConfigurationFile>;\n}\n\ninterface IJsonPathCallbackObject {\n  path: string;\n  parent: object;\n  parentProperty: string;\n  value: string;\n}\n\n/**\n * @beta\n */\nexport interface IOriginalValueOptions<TParentProperty> {\n  parentObject: TParentProperty;\n  propertyName: keyof TParentProperty;\n}\n\n/**\n * @beta\n */\nexport class ConfigurationFile<TConfigurationFile> {\n  private readonly _schemaPath: string;\n\n  /** {@inheritDoc IConfigurationFileOptions.projectRelativeFilePath} */\n  public readonly projectRelativeFilePath: string;\n\n  private readonly _jsonPathMetadata: IJsonPathsMetadata;\n  private readonly _propertyInheritanceTypes: IPropertiesInheritance<TConfigurationFile>;\n  private __schema: JsonSchema | undefined;\n  private get _schema(): JsonSchema {\n    if (!this.__schema) {\n      this.__schema = JsonSchema.fromFile(this._schemaPath);\n    }\n\n    return this.__schema;\n  }\n\n  private readonly _configPromiseCache: Map<string, Promise<TConfigurationFile>> = new Map();\n  private readonly _packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\n\n  public constructor(options: IConfigurationFileOptions<TConfigurationFile>) {\n    this.projectRelativeFilePath = options.projectRelativeFilePath;\n    this._schemaPath = options.jsonSchemaPath;\n    this._jsonPathMetadata = options.jsonPathMetadata || {};\n    this._propertyInheritanceTypes = options.propertyInheritance || {};\n  }\n\n  /**\n   * Find and return a configuration file for the specified project, automatically resolving\n   * `extends` properties and handling rigged configuration files. Will throw an error if a configuration\n   * file cannot be found in the rig or project config folder.\n   */\n  public async loadConfigurationFileForProjectAsync(\n    terminal: ITerminal,\n    projectPath: string,\n    rigConfig?: RigConfig\n  ): Promise<TConfigurationFile> {\n    const projectConfigurationFilePath: string = this._getConfigurationFilePathForProject(projectPath);\n    return await this._loadConfigurationFileInnerWithCacheAsync(\n      terminal,\n      projectConfigurationFilePath,\n      new Set<string>(),\n      rigConfig\n    );\n  }\n\n  /**\n   * This function is identical to {@link ConfigurationFile.loadConfigurationFileForProjectAsync}, except\n   * that it returns `undefined` instead of throwing an error if the configuration file cannot be found.\n   */\n  public async tryLoadConfigurationFileForProjectAsync(\n    terminal: ITerminal,\n    projectPath: string,\n    rigConfig?: RigConfig\n  ): Promise<TConfigurationFile | undefined> {\n    try {\n      return await this.loadConfigurationFileForProjectAsync(terminal, projectPath, rigConfig);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e as Error)) {\n        return undefined;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public static _formatPathForLogging: (path: string) => string = (path: string) => path;\n\n  /**\n   * Get the path to the source file that the referenced property was originally\n   * loaded from.\n   */\n  public getObjectSourceFilePath<TObject extends object>(obj: TObject): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const annotation: IConfigurationFileFieldAnnotation<TObject> | undefined = (obj as any)[\n      CONFIGURATION_FILE_FIELD_ANNOTATION\n    ];\n    if (annotation) {\n      return annotation.configurationFilePath;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get the value of the specified property on the specified object that was originally\n   * loaded from a configuration file.\n   */\n  public getPropertyOriginalValue<TParentProperty extends object, TValue>(\n    options: IOriginalValueOptions<TParentProperty>\n  ): TValue | undefined {\n    const annotation: IConfigurationFileFieldAnnotation<TParentProperty> | undefined =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options.parentObject as any)[CONFIGURATION_FILE_FIELD_ANNOTATION];\n    if (annotation && annotation.originalValues.hasOwnProperty(options.propertyName)) {\n      return annotation.originalValues[options.propertyName] as TValue;\n    } else {\n      return undefined;\n    }\n  }\n\n  private async _loadConfigurationFileInnerWithCacheAsync(\n    terminal: ITerminal,\n    resolvedConfigurationFilePath: string,\n    visitedConfigurationFilePaths: Set<string>,\n    rigConfig: RigConfig | undefined\n  ): Promise<TConfigurationFile> {\n    let cacheEntryPromise: Promise<TConfigurationFile> | undefined = this._configPromiseCache.get(\n      resolvedConfigurationFilePath\n    );\n    if (!cacheEntryPromise) {\n      cacheEntryPromise = this._loadConfigurationFileInnerAsync(\n        terminal,\n        resolvedConfigurationFilePath,\n        visitedConfigurationFilePaths,\n        rigConfig\n      );\n      this._configPromiseCache.set(resolvedConfigurationFilePath, cacheEntryPromise);\n    }\n\n    // We check for loops after caching a promise for this config file, but before attempting\n    // to resolve the promise. We can't handle loop detection in the `InnerAsync` function, because\n    // we could end up waiting for a cached promise (like A -> B -> A) that never resolves.\n    if (visitedConfigurationFilePaths.has(resolvedConfigurationFilePath)) {\n      const resolvedConfigurationFilePathForLogging: string = ConfigurationFile._formatPathForLogging(\n        resolvedConfigurationFilePath\n      );\n      throw new Error(\n        'A loop has been detected in the \"extends\" properties of configuration file at ' +\n          `\"${resolvedConfigurationFilePathForLogging}\".`\n      );\n    }\n    visitedConfigurationFilePaths.add(resolvedConfigurationFilePath);\n\n    return await cacheEntryPromise;\n  }\n\n  // NOTE: Internal calls to load a configuration file should use `_loadConfigurationFileInnerWithCacheAsync`.\n  // Don't call this function directly, as it does not provide config file loop detection,\n  // and you won't get the advantage of queueing up for a config file that is already loading.\n  private async _loadConfigurationFileInnerAsync(\n    terminal: ITerminal,\n    resolvedConfigurationFilePath: string,\n    visitedConfigurationFilePaths: Set<string>,\n    rigConfig: RigConfig | undefined\n  ): Promise<TConfigurationFile> {\n    const resolvedConfigurationFilePathForLogging: string = ConfigurationFile._formatPathForLogging(\n      resolvedConfigurationFilePath\n    );\n\n    let fileText: string;\n    try {\n      fileText = await FileSystem.readFileAsync(resolvedConfigurationFilePath);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e as Error)) {\n        if (rigConfig) {\n          terminal.writeDebugLine(\n            `Config file \"${resolvedConfigurationFilePathForLogging}\" does not exist. Attempting to load via rig.`\n          );\n          const rigResult: TConfigurationFile | undefined = await this._tryLoadConfigurationFileInRigAsync(\n            terminal,\n            rigConfig,\n            visitedConfigurationFilePaths\n          );\n          if (rigResult) {\n            return rigResult;\n          }\n        } else {\n          terminal.writeDebugLine(\n            `Configuration file \"${resolvedConfigurationFilePathForLogging}\" not found.`\n          );\n        }\n\n        (e as Error).message = `File does not exist: ${resolvedConfigurationFilePathForLogging}`;\n      }\n\n      throw e;\n    }\n\n    let configurationJson: IConfigurationJson & TConfigurationFile;\n    try {\n      configurationJson = await JsonFile.parseString(fileText);\n    } catch (e) {\n      throw new Error(`In config file \"${resolvedConfigurationFilePathForLogging}\": ${e}`);\n    }\n\n    this._schema.validateObject(configurationJson, resolvedConfigurationFilePathForLogging);\n\n    this._annotateProperties(resolvedConfigurationFilePath, configurationJson);\n\n    for (const [jsonPath, metadata] of Object.entries(this._jsonPathMetadata)) {\n      JSONPath({\n        path: jsonPath,\n        json: configurationJson,\n        callback: (payload: unknown, payloadType: string, fullPayload: IJsonPathCallbackObject) => {\n          const resolvedPath: string = this._resolvePathProperty(\n            resolvedConfigurationFilePath,\n            fullPayload.path,\n            fullPayload.value,\n            metadata\n          );\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (fullPayload.parent as any)[fullPayload.parentProperty] = resolvedPath;\n        },\n        otherTypeCallback: () => {\n          throw new Error('@other() tags are not supported');\n        }\n      });\n    }\n\n    let parentConfiguration: Partial<TConfigurationFile> = {};\n    if (configurationJson.extends) {\n      try {\n        const resolvedParentConfigPath: string = Import.resolveModule({\n          modulePath: configurationJson.extends,\n          baseFolderPath: nodeJsPath.dirname(resolvedConfigurationFilePath)\n        });\n        parentConfiguration = await this._loadConfigurationFileInnerWithCacheAsync(\n          terminal,\n          resolvedParentConfigPath,\n          visitedConfigurationFilePaths,\n          undefined\n        );\n      } catch (e) {\n        if (FileSystem.isNotExistError(e as Error)) {\n          throw new Error(\n            `In file \"${resolvedConfigurationFilePathForLogging}\", file referenced in \"extends\" property ` +\n              `(\"${configurationJson.extends}\") cannot be resolved.`\n          );\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    const propertyNames: Set<string> = new Set<string>([\n      ...Object.keys(parentConfiguration),\n      ...Object.keys(configurationJson)\n    ]);\n\n    const resultAnnotation: IConfigurationFileFieldAnnotation<TConfigurationFile> = {\n      configurationFilePath: resolvedConfigurationFilePath,\n      originalValues: {} as TConfigurationFile\n    };\n    const result: TConfigurationFile = {\n      [CONFIGURATION_FILE_FIELD_ANNOTATION]: resultAnnotation\n    } as unknown as TConfigurationFile;\n    for (const propertyName of propertyNames) {\n      if (propertyName === '$schema' || propertyName === 'extends') {\n        continue;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const propertyValue: unknown | undefined = (configurationJson as any)[propertyName];\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const parentPropertyValue: unknown | undefined = (parentConfiguration as any)[propertyName];\n\n      const bothAreArrays: boolean = Array.isArray(propertyValue) && Array.isArray(parentPropertyValue);\n      const defaultInheritanceType: IPropertyInheritance<InheritanceType> = bothAreArrays\n        ? { inheritanceType: InheritanceType.append }\n        : { inheritanceType: InheritanceType.replace };\n      const propertyInheritance: IPropertyInheritance<InheritanceType> =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (this._propertyInheritanceTypes as any)[propertyName] !== undefined\n          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (this._propertyInheritanceTypes as any)[propertyName]\n          : defaultInheritanceType;\n\n      let newValue: unknown;\n      const usePropertyValue: () => void = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (resultAnnotation.originalValues as any)[propertyName] = this.getPropertyOriginalValue<any, any>({\n          parentObject: configurationJson,\n          propertyName: propertyName\n        });\n        newValue = propertyValue;\n      };\n      const useParentPropertyValue: () => void = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (resultAnnotation.originalValues as any)[propertyName] = this.getPropertyOriginalValue<any, any>({\n          parentObject: parentConfiguration,\n          propertyName: propertyName\n        });\n        newValue = parentPropertyValue;\n      };\n\n      if (propertyValue !== undefined && parentPropertyValue === undefined) {\n        usePropertyValue();\n      } else if (parentPropertyValue !== undefined && propertyValue === undefined) {\n        useParentPropertyValue();\n      } else {\n        switch (propertyInheritance.inheritanceType) {\n          case InheritanceType.replace: {\n            if (propertyValue !== undefined) {\n              usePropertyValue();\n            } else {\n              useParentPropertyValue();\n            }\n\n            break;\n          }\n\n          case InheritanceType.append: {\n            if (propertyValue !== undefined && parentPropertyValue === undefined) {\n              usePropertyValue();\n            } else if (propertyValue === undefined && parentPropertyValue !== undefined) {\n              useParentPropertyValue();\n            } else {\n              if (!Array.isArray(propertyValue) || !Array.isArray(parentPropertyValue)) {\n                throw new Error(\n                  `Issue in processing configuration file property \"${propertyName}\". ` +\n                    `Property is not an array, but the inheritance type is set as \"${InheritanceType.append}\"`\n                );\n              }\n\n              newValue = [...parentPropertyValue, ...propertyValue];\n              (newValue as unknown as IAnnotatedField<unknown[]>)[CONFIGURATION_FILE_FIELD_ANNOTATION] = {\n                configurationFilePath: undefined,\n                originalValues: {\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  ...(parentPropertyValue as any)[CONFIGURATION_FILE_FIELD_ANNOTATION].originalValues,\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  ...(propertyValue as any)[CONFIGURATION_FILE_FIELD_ANNOTATION].originalValues\n                }\n              };\n            }\n\n            break;\n          }\n\n          case InheritanceType.custom: {\n            const customInheritance: ICustomPropertyInheritance<unknown> =\n              propertyInheritance as ICustomPropertyInheritance<unknown>;\n            if (\n              !customInheritance.inheritanceFunction ||\n              typeof customInheritance.inheritanceFunction !== 'function'\n            ) {\n              throw new Error(\n                'For property inheritance type \"InheritanceType.custom\", an inheritanceFunction must be provided.'\n              );\n            }\n\n            newValue = customInheritance.inheritanceFunction(propertyValue, parentPropertyValue);\n\n            break;\n          }\n\n          default: {\n            throw new Error(`Unknown inheritance type \"${propertyInheritance}\"`);\n          }\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (result as any)[propertyName] = newValue;\n    }\n\n    try {\n      this._schema.validateObject(result, resolvedConfigurationFilePathForLogging);\n    } catch (e) {\n      throw new Error(`Resolved configuration object does not match schema: ${e}`);\n    }\n\n    return result;\n  }\n\n  private async _tryLoadConfigurationFileInRigAsync(\n    terminal: ITerminal,\n    rigConfig: RigConfig,\n    visitedConfigurationFilePaths: Set<string>\n  ): Promise<TConfigurationFile | undefined> {\n    if (rigConfig.rigFound) {\n      const rigProfileFolder: string = await rigConfig.getResolvedProfileFolderAsync();\n      try {\n        return await this._loadConfigurationFileInnerWithCacheAsync(\n          terminal,\n          nodeJsPath.resolve(rigProfileFolder, this.projectRelativeFilePath),\n          visitedConfigurationFilePaths,\n          undefined\n        );\n      } catch (e) {\n        // Ignore cases where a configuration file doesn't exist in a rig\n        if (!FileSystem.isNotExistError(e as Error)) {\n          throw e;\n        } else {\n          terminal.writeDebugLine(\n            `Configuration file \"${\n              this.projectRelativeFilePath\n            }\" not found in rig (\"${ConfigurationFile._formatPathForLogging(rigProfileFolder)}\")`\n          );\n        }\n      }\n    } else {\n      terminal.writeDebugLine(\n        `No rig found for \"${ConfigurationFile._formatPathForLogging(rigConfig.projectFolderPath)}\"`\n      );\n    }\n\n    return undefined;\n  }\n\n  private _annotateProperties<TObject>(resolvedConfigurationFilePath: string, obj: TObject): void {\n    if (!obj) {\n      return;\n    }\n\n    if (typeof obj === 'object') {\n      this._annotateProperty(resolvedConfigurationFilePath, obj);\n\n      for (const objValue of Object.values(obj)) {\n        this._annotateProperties(resolvedConfigurationFilePath, objValue);\n      }\n    }\n  }\n\n  private _annotateProperty<TObject>(resolvedConfigurationFilePath: string, obj: TObject): void {\n    if (!obj) {\n      return;\n    }\n\n    if (typeof obj === 'object') {\n      (obj as unknown as IAnnotatedField<TObject>)[CONFIGURATION_FILE_FIELD_ANNOTATION] = {\n        configurationFilePath: resolvedConfigurationFilePath,\n        originalValues: { ...obj }\n      };\n    }\n  }\n\n  private _resolvePathProperty(\n    configurationFilePath: string,\n    propertyName: string,\n    propertyValue: string,\n    metadata: IJsonPathMetadata\n  ): string {\n    const resolutionMethod: PathResolutionMethod | undefined = metadata.pathResolutionMethod;\n    if (resolutionMethod === undefined) {\n      return propertyValue;\n    }\n\n    switch (metadata.pathResolutionMethod) {\n      case PathResolutionMethod.resolvePathRelativeToConfigurationFile: {\n        return nodeJsPath.resolve(nodeJsPath.dirname(configurationFilePath), propertyValue);\n      }\n\n      case PathResolutionMethod.resolvePathRelativeToProjectRoot: {\n        const packageRoot: string | undefined =\n          this._packageJsonLookup.tryGetPackageFolderFor(configurationFilePath);\n        if (!packageRoot) {\n          throw new Error(\n            `Could not find a package root for path \"${ConfigurationFile._formatPathForLogging(\n              configurationFilePath\n            )}\"`\n          );\n        }\n\n        return nodeJsPath.resolve(packageRoot, propertyValue);\n      }\n\n      case PathResolutionMethod.NodeResolve: {\n        return Import.resolveModule({\n          modulePath: propertyValue,\n          baseFolderPath: nodeJsPath.dirname(configurationFilePath)\n        });\n      }\n\n      case PathResolutionMethod.custom: {\n        if (!metadata.customResolver) {\n          throw new Error(\n            `The pathResolutionMethod was set to \"${PathResolutionMethod[resolutionMethod]}\", but a custom ` +\n              'resolver was not provided.'\n          );\n        }\n        return metadata.customResolver(configurationFilePath, propertyName, propertyValue);\n      }\n\n      default: {\n        throw new Error(\n          `Unsupported PathResolutionMethod: ${PathResolutionMethod[resolutionMethod]} (${resolutionMethod})`\n        );\n      }\n    }\n  }\n\n  private _getConfigurationFilePathForProject(projectPath: string): string {\n    return nodeJsPath.resolve(projectPath, this.projectRelativeFilePath);\n  }\n}\n"]}