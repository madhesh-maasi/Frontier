{"version":3,"file":"exec.js","sourceRoot":"","sources":["../src/exec.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA0D;AAE1D,2BAA2B;AAC3B,MAAM,IAAI,GAAiE,OAAO,CAAC,MAAM,CAAC,CAAC;AAQpF,KAAK,UAAU,YAAY,CAAC,OAAe,EAAE,MAAgB;IAClE,MAAM,MAAM,GAA+B,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,EAAE;QACpE,aAAa,EAAE,KAAK;QACpB,MAAM,EAAE,uBAAuB;KAChC,CAAC,CAAC;IACH,OAAO,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAND,oCAMC;AAEM,KAAK,UAAU,QAAQ,CAAC,OAAe,EAAE,MAAgB;IAC9D,MAAM,MAAM,GAA+B,8BAAU,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC7E,OAAO,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAHD,4BAGC;AAED,KAAK,UAAU,mBAAmB,CAAC,YAAwC;IACzE,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAqC,EAAE,EAAE;QACjE,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;YAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,EAAE;YACxC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Executable } from '@rushstack/node-core-library';\r\nimport * as child_process from 'child_process';\r\n// eslint-disable-next-line\r\nconst sudo: (args: string[], options: any) => child_process.ChildProcess = require('sudo');\r\n\r\nexport interface IRunResult {\r\n  stdout: string[];\r\n  stderr: string[];\r\n  code: number;\r\n}\r\n\r\nexport async function runSudoAsync(command: string, params: string[]): Promise<IRunResult> {\r\n  const result: child_process.ChildProcess = sudo([command, ...params], {\r\n    cachePassword: false,\r\n    prompt: 'Enter your password: '\r\n  });\r\n  return await _handleChildProcess(result);\r\n}\r\n\r\nexport async function runAsync(command: string, params: string[]): Promise<IRunResult> {\r\n  const result: child_process.ChildProcess = Executable.spawn(command, params);\r\n  return await _handleChildProcess(result);\r\n}\r\n\r\nasync function _handleChildProcess(childProcess: child_process.ChildProcess): Promise<IRunResult> {\r\n  return await new Promise((resolve: (result: IRunResult) => void) => {\r\n    const stderr: string[] = [];\r\n    childProcess.stderr.on('data', (data: Buffer) => {\r\n      stderr.push(data.toString());\r\n    });\r\n\r\n    const stdout: string[] = [];\r\n    childProcess.stdout.on('data', (data: Buffer) => {\r\n      stdout.push(data.toString());\r\n    });\r\n\r\n    childProcess.on('close', (code: number) => {\r\n      resolve({ code, stdout, stderr });\r\n    });\r\n  });\r\n}\r\n"]}