{"version":3,"file":"CertificateManager.js","sourceRoot":"","sources":["../src/CertificateManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as forge from 'node-forge';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\nimport { EOL } from 'os';\r\nimport { FileSystem, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport { runSudoAsync, IRunResult, runAsync } from './exec';\r\nimport { CertificateStore } from './CertificateStore';\r\n\r\nconst SERIAL_NUMBER: string = '731c321744e34650a202e3ef91c3c1b0';\r\nconst FRIENDLY_NAME: string = 'debug-certificate-manager Development Certificate';\r\nconst MAC_KEYCHAIN: string = '/Library/Keychains/System.keychain';\r\nconst CERTUTIL_EXE_NAME: string = 'certutil';\r\n\r\n/**\r\n * The interface for a debug certificate instance\r\n *\r\n * @public\r\n */\r\nexport interface ICertificate {\r\n  /**\r\n   * Generated pem certificate contents\r\n   */\r\n  pemCertificate: string | undefined;\r\n\r\n  /**\r\n   * Private key used to sign the pem certificate\r\n   */\r\n  pemKey: string | undefined;\r\n}\r\n\r\n/**\r\n * A utility class to handle generating, trusting, and untrustring a debug certificate.\r\n * Contains two public methods to `ensureCertificate` and `untrustCertificate`.\r\n * @public\r\n */\r\nexport class CertificateManager {\r\n  private _certificateStore: CertificateStore;\r\n  private _getCertUtilPathPromise: Promise<string | undefined> | undefined;\r\n\r\n  public constructor() {\r\n    this._certificateStore = new CertificateStore();\r\n  }\r\n\r\n  /**\r\n   * Get a dev certificate from the store, or optionally, generate a new one\r\n   * and trust it if one doesn't exist in the store.\r\n   *\r\n   * @public\r\n   */\r\n  public async ensureCertificateAsync(\r\n    canGenerateNewCertificate: boolean,\r\n    terminal: Terminal\r\n  ): Promise<ICertificate> {\r\n    if (this._certificateStore.certificateData && this._certificateStore.keyData) {\r\n      if (!this._certificateHasSubjectAltName()) {\r\n        let warningMessage: string =\r\n          'The existing development certificate is missing the subjectAltName ' +\r\n          'property and will not work with the latest versions of some browsers. ';\r\n\r\n        if (canGenerateNewCertificate) {\r\n          warningMessage += ' Attempting to untrust the certificate and generate a new one.';\r\n        } else {\r\n          warningMessage += ' Untrust the certificate and generate a new one.';\r\n        }\r\n\r\n        terminal.writeWarningLine(warningMessage);\r\n\r\n        if (canGenerateNewCertificate) {\r\n          await this.untrustCertificateAsync(terminal);\r\n          await this._ensureCertificateInternalAsync(terminal);\r\n        }\r\n      }\r\n    } else if (canGenerateNewCertificate) {\r\n      await this._ensureCertificateInternalAsync(terminal);\r\n    }\r\n\r\n    return {\r\n      pemCertificate: this._certificateStore.certificateData,\r\n      pemKey: this._certificateStore.keyData\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Attempt to locate a previously generated debug certificate and untrust it.\r\n   *\r\n   * @public\r\n   */\r\n  public async untrustCertificateAsync(terminal: Terminal): Promise<boolean> {\r\n    switch (process.platform) {\r\n      case 'win32':\r\n        const winUntrustResult: child_process.SpawnSyncReturns<string> = child_process.spawnSync(\r\n          CERTUTIL_EXE_NAME,\r\n          ['-user', '-delstore', 'root', SERIAL_NUMBER]\r\n        );\r\n\r\n        if (winUntrustResult.status !== 0) {\r\n          terminal.writeErrorLine(`Error: ${winUntrustResult.stdout.toString()}`);\r\n          return false;\r\n        } else {\r\n          terminal.writeVerboseLine('Successfully untrusted development certificate.');\r\n          return true;\r\n        }\r\n\r\n      case 'darwin':\r\n        terminal.writeVerboseLine('Trying to find the signature of the dev cert');\r\n\r\n        const macFindCertificateResult: child_process.SpawnSyncReturns<string> = child_process.spawnSync(\r\n          'security',\r\n          ['find-certificate', '-c', 'localhost', '-a', '-Z', MAC_KEYCHAIN]\r\n        );\r\n        if (macFindCertificateResult.status !== 0) {\r\n          terminal.writeErrorLine(\r\n            `Error finding the dev certificate: ${macFindCertificateResult.output.join(' ')}`\r\n          );\r\n          return false;\r\n        }\r\n\r\n        const outputLines: string[] = macFindCertificateResult.stdout.toString().split(EOL);\r\n        let found: boolean = false;\r\n        let shaHash: string = '';\r\n        for (let i: number = 0; i < outputLines.length; i++) {\r\n          const line: string = outputLines[i];\r\n          const shaMatch: string[] | null = line.match(/^SHA-1 hash: (.+)$/);\r\n          if (shaMatch) {\r\n            shaHash = shaMatch[1];\r\n          }\r\n\r\n          const snbrMatch: string[] | null = line.match(/^\\s*\"snbr\"<blob>=0x([^\\s]+).+$/);\r\n          if (snbrMatch && (snbrMatch[1] || '').toLowerCase() === SERIAL_NUMBER) {\r\n            found = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!found) {\r\n          terminal.writeErrorLine('Unable to find the dev certificate.');\r\n          return false;\r\n        }\r\n\r\n        terminal.writeVerboseLine(`Found the dev cert. SHA is ${shaHash}`);\r\n\r\n        const macUntrustResult: IRunResult = await runSudoAsync('security', [\r\n          'delete-certificate',\r\n          '-Z',\r\n          shaHash,\r\n          MAC_KEYCHAIN\r\n        ]);\r\n\r\n        if (macUntrustResult.code === 0) {\r\n          terminal.writeVerboseLine('Successfully untrusted dev certificate.');\r\n          return true;\r\n        } else {\r\n          terminal.writeErrorLine(macUntrustResult.stderr.join(' '));\r\n          return false;\r\n        }\r\n\r\n      default:\r\n        // Linux + others: Have the user manually untrust the cert\r\n        terminal.writeLine(\r\n          'Automatic certificate untrust is only implemented for debug-certificate-manager on Windows ' +\r\n            'and macOS. To untrust the development certificate, remove this certificate from your trusted ' +\r\n            `root certification authorities: \"${this._certificateStore.certificatePath}\". The ` +\r\n            `certificate has serial number \"${SERIAL_NUMBER}\".`\r\n        );\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private _createDevelopmentCertificate(): ICertificate {\r\n    const keys: forge.pki.KeyPair = forge.pki.rsa.generateKeyPair(2048);\r\n    const certificate: forge.pki.Certificate = forge.pki.createCertificate();\r\n    certificate.publicKey = keys.publicKey;\r\n\r\n    certificate.serialNumber = SERIAL_NUMBER;\r\n\r\n    const now: Date = new Date();\r\n    certificate.validity.notBefore = now;\r\n    // Valid for 3 years\r\n    certificate.validity.notAfter.setFullYear(certificate.validity.notBefore.getFullYear() + 3);\r\n\r\n    const attrs: forge.pki.CertificateField[] = [\r\n      {\r\n        name: 'commonName',\r\n        value: 'localhost'\r\n      }\r\n    ];\r\n\r\n    certificate.setSubject(attrs);\r\n    certificate.setIssuer(attrs);\r\n\r\n    certificate.setExtensions([\r\n      {\r\n        name: 'subjectAltName',\r\n        altNames: [\r\n          {\r\n            type: 2, // DNS\r\n            value: 'localhost'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'keyUsage',\r\n        digitalSignature: true,\r\n        keyEncipherment: true,\r\n        dataEncipherment: true\r\n      },\r\n      {\r\n        name: 'extKeyUsage',\r\n        serverAuth: true\r\n      },\r\n      {\r\n        name: 'friendlyName',\r\n        value: FRIENDLY_NAME\r\n      }\r\n    ]);\r\n\r\n    // self-sign certificate\r\n    certificate.sign(keys.privateKey, forge.md.sha256.create());\r\n\r\n    // convert a Forge certificate to PEM\r\n    const pem: string = forge.pki.certificateToPem(certificate);\r\n    const pemKey: string = forge.pki.privateKeyToPem(keys.privateKey);\r\n\r\n    return {\r\n      pemCertificate: pem,\r\n      pemKey: pemKey\r\n    };\r\n  }\r\n\r\n  private async _tryTrustCertificateAsync(certificatePath: string, terminal: Terminal): Promise<boolean> {\r\n    switch (process.platform) {\r\n      case 'win32':\r\n        terminal.writeLine(\r\n          'Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\r\n            'and will be stored in your local user profile to be used by other instances of ' +\r\n            'debug-certificate-manager. If you do not consent to trust this certificate, click \"NO\" in the dialog.'\r\n        );\r\n\r\n        const winTrustResult: IRunResult = await runAsync(CERTUTIL_EXE_NAME, [\r\n          '-user',\r\n          '-addstore',\r\n          'root',\r\n          certificatePath\r\n        ]);\r\n\r\n        if (winTrustResult.code !== 0) {\r\n          terminal.writeErrorLine(`Error: ${winTrustResult.stdout.toString()}`);\r\n\r\n          const errorLines: string[] = winTrustResult.stdout\r\n            .toString()\r\n            .split(EOL)\r\n            .map((line: string) => line.trim());\r\n\r\n          // Not sure if this is always the status code for \"cancelled\" - should confirm.\r\n          if (\r\n            winTrustResult.code === 2147943623 ||\r\n            errorLines[errorLines.length - 1].indexOf('The operation was canceled by the user.') > 0\r\n          ) {\r\n            terminal.writeLine('Certificate trust cancelled.');\r\n          } else {\r\n            terminal.writeErrorLine('Certificate trust failed with an unknown error.');\r\n          }\r\n\r\n          return false;\r\n        } else {\r\n          terminal.writeVerboseLine('Successfully trusted development certificate.');\r\n\r\n          return true;\r\n        }\r\n\r\n      case 'darwin':\r\n        terminal.writeLine(\r\n          'Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\r\n            'and will be stored in your local user profile to be used by other instances of ' +\r\n            'debug-certificate-manager. If you do not consent to trust this certificate, do not enter your ' +\r\n            'root password in the prompt.'\r\n        );\r\n\r\n        const result: IRunResult = await runSudoAsync('security', [\r\n          'add-trusted-cert',\r\n          '-d',\r\n          '-r',\r\n          'trustRoot',\r\n          '-k',\r\n          MAC_KEYCHAIN,\r\n          certificatePath\r\n        ]);\r\n\r\n        if (result.code === 0) {\r\n          terminal.writeVerboseLine('Successfully trusted development certificate.');\r\n          return true;\r\n        } else {\r\n          if (\r\n            result.stderr.some(\r\n              (value: string) => !!value.match(/The authorization was cancelled by the user\\./)\r\n            )\r\n          ) {\r\n            terminal.writeLine('Certificate trust cancelled.');\r\n            return false;\r\n          } else {\r\n            terminal.writeErrorLine(\r\n              `Certificate trust failed with an unknown error. Exit code: ${result.code}. ` +\r\n                `Error: ${result.stderr.join(' ')}`\r\n            );\r\n            return false;\r\n          }\r\n        }\r\n\r\n      default:\r\n        // Linux + others: Have the user manually trust the cert if they want to\r\n        terminal.writeLine(\r\n          'Automatic certificate trust is only implemented for debug-certificate-manager on Windows ' +\r\n            'and macOS. To trust the development certificate, add this certificate to your trusted root ' +\r\n            `certification authorities: \"${certificatePath}\".`\r\n        );\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private async _trySetFriendlyNameAsync(certificatePath: string, terminal: Terminal): Promise<boolean> {\r\n    if (process.platform === 'win32') {\r\n      const basePath: string = path.dirname(certificatePath);\r\n      const fileName: string = path.basename(certificatePath, path.extname(certificatePath));\r\n      const friendlyNamePath: string = path.join(basePath, `${fileName}.inf`);\r\n\r\n      const friendlyNameFile: string = [\r\n        '[Version]',\r\n        'Signature = \"$Windows NT$\"',\r\n        '[Properties]',\r\n        `11 = \"{text}${FRIENDLY_NAME}\"`,\r\n        ''\r\n      ].join(EOL);\r\n\r\n      await FileSystem.writeFileAsync(friendlyNamePath, friendlyNameFile);\r\n\r\n      const commands: string[] = ['–repairstore', '–user', 'root', SERIAL_NUMBER, friendlyNamePath];\r\n      const repairStoreResult: child_process.SpawnSyncReturns<string> = child_process.spawnSync(\r\n        CERTUTIL_EXE_NAME,\r\n        commands\r\n      );\r\n\r\n      if (repairStoreResult.status !== 0) {\r\n        terminal.writeErrorLine(`CertUtil Error: ${repairStoreResult.stdout.toString()}`);\r\n\r\n        return false;\r\n      } else {\r\n        terminal.writeVerboseLine('Successfully set certificate name.');\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      // No equivalent concept outside of Windows\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private async _ensureCertificateInternalAsync(terminal: Terminal): Promise<void> {\r\n    const certificateStore: CertificateStore = this._certificateStore;\r\n    const generatedCertificate: ICertificate = this._createDevelopmentCertificate();\r\n\r\n    const now: Date = new Date();\r\n    const certificateName: string = now.getTime().toString();\r\n    const tempDirName: string = path.join(__dirname, '..', 'temp');\r\n\r\n    const tempCertificatePath: string = path.join(tempDirName, `${certificateName}.pem`);\r\n    const pemFileContents: string | undefined = generatedCertificate.pemCertificate;\r\n    if (pemFileContents) {\r\n      FileSystem.writeFile(tempCertificatePath, pemFileContents, {\r\n        ensureFolderExists: true\r\n      });\r\n    }\r\n\r\n    const trustCertificateResult: boolean = await this._tryTrustCertificateAsync(\r\n      tempCertificatePath,\r\n      terminal\r\n    );\r\n    if (trustCertificateResult) {\r\n      certificateStore.certificateData = generatedCertificate.pemCertificate;\r\n      certificateStore.keyData = generatedCertificate.pemKey;\r\n\r\n      // Try to set the friendly name, and warn if we can't\r\n      if (!this._trySetFriendlyNameAsync(tempCertificatePath, terminal)) {\r\n        terminal.writeWarningLine(\"Unable to set the certificate's friendly name.\");\r\n      }\r\n    } else {\r\n      // Clear out the existing store data, if any exists\r\n      certificateStore.certificateData = undefined;\r\n      certificateStore.keyData = undefined;\r\n    }\r\n\r\n    await FileSystem.deleteFileAsync(tempCertificatePath);\r\n  }\r\n\r\n  private _certificateHasSubjectAltName(): boolean {\r\n    const certificateData: string | undefined = this._certificateStore.certificateData;\r\n    if (!certificateData) {\r\n      return false;\r\n    }\r\n    const certificate: forge.pki.Certificate = forge.pki.certificateFromPem(certificateData);\r\n    return !!certificate.getExtension('subjectAltName');\r\n  }\r\n}\r\n"]}