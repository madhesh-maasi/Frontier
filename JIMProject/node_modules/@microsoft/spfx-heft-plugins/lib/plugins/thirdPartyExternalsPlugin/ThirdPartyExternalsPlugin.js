"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyExternalsPlugin = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const WebpackConfigurationGenerator_1 = require("../webpackConfigurationPlugin/WebpackConfigurationGenerator");
const LegacyExternals_1 = require("./LegacyExternals");
/**
 * @internal
 */
class ThirdPartyExternalsPlugin {
    constructor() {
        this.pluginName = "third-party-externals-plugin" /* ThirdPartyExternalsPlugin */;
    }
    apply(heftSession, heftConfiguration) {
        heftSession.hooks.build.tap("third-party-externals-plugin" /* ThirdPartyExternalsPlugin */, (build) => {
            build.hooks.bundle.tap("third-party-externals-plugin" /* ThirdPartyExternalsPlugin */, (bundleSubstage) => {
                bundleSubstage.hooks.configureWebpack.tap({ name: "third-party-externals-plugin" /* ThirdPartyExternalsPlugin */, stage: Number.MAX_SAFE_INTEGER / 2 }, // Make sure this runs after the webpack configuration
                (untypedConfig) => {
                    const scopedLogger = heftSession.requestScopedLogger("third-party-externals-plugin" /* ThirdPartyExternalsPlugin */);
                    const config = untypedConfig;
                    if (!(config === null || config === void 0 ? void 0 : config[WebpackConfigurationGenerator_1.IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL])) {
                        const thisPackageJson = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname);
                        scopedLogger.emitError(new Error('A SPFx webpack configuration must have already been generated. Has ' +
                            `${"spfx-webpack-configuration-plugin" /* SpfxWebpackConfigurationPlugin */} in ${thisPackageJson.name} been applied?`));
                    }
                    else {
                        const configJson = config[WebpackConfigurationGenerator_1.CONFIG_JSON_SYMBOL];
                        const legacyExternals = new LegacyExternals_1.LegacyExternals({
                            configJson: configJson,
                            terminal: scopedLogger.terminal,
                            singleLocale: build.properties.locale,
                            buildFolder: heftConfiguration.buildFolder,
                            serveMode: build.properties.serveMode,
                            production: build.properties.production
                        });
                        legacyExternals.updateWebpackConfiguration(config);
                    }
                    return config;
                });
            });
        });
    }
}
exports.ThirdPartyExternalsPlugin = ThirdPartyExternalsPlugin;
exports.default = new ThirdPartyExternalsPlugin();
//# sourceMappingURL=ThirdPartyExternalsPlugin.js.map