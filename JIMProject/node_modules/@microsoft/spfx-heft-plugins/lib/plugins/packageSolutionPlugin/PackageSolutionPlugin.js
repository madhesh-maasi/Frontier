"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageSolutionPlugin = void 0;
const SolutionPackager_1 = require("./SolutionPackager");
const ACTION_NAME = 'package-solution';
/**
 * @internal
 */
class PackageSolutionPlugin {
    constructor() {
        this.pluginName = "package-solution-plugin" /* PackageSolutionPlugin */;
    }
    apply(heftSession, heftConfiguration) {
        heftSession.registerAction({
            actionName: ACTION_NAME,
            documentation: 'Package the project into a SPPKG',
            parameters: {
                production: {
                    kind: 'flag',
                    parameterLongName: '--production',
                    description: 'If specified, package the solution in production mode.'
                }
            },
            callback: async (options) => {
                const logger = heftSession.requestScopedLogger(ACTION_NAME);
                const solutionPackager = new SolutionPackager_1.SolutionPackager({
                    buildFolder: heftConfiguration.buildFolder,
                    terminal: heftConfiguration.globalTerminal,
                    emitError: logger.emitError.bind(logger),
                    emitWarning: logger.emitWarning.bind(logger)
                });
                await solutionPackager.packageSolutionAsync(options.production);
            }
        });
        heftSession.hooks.clean.tap("package-solution-plugin" /* PackageSolutionPlugin */, (clean) => {
            clean.hooks.loadStageConfiguration.tapPromise("package-solution-plugin" /* PackageSolutionPlugin */, async () => {
                const logger = heftSession.requestScopedLogger(ACTION_NAME);
                const solutionPackager = new SolutionPackager_1.SolutionPackager({
                    buildFolder: heftConfiguration.buildFolder,
                    terminal: logger.terminal,
                    emitError: logger.emitError.bind(logger),
                    emitWarning: logger.emitWarning.bind(logger)
                });
                const cleanPaths = await solutionPackager.getCleanPathsAsync();
                for (const cleanPath of cleanPaths) {
                    clean.properties.pathsToDelete.add(cleanPath);
                }
            });
        });
    }
}
exports.PackageSolutionPlugin = PackageSolutionPlugin;
exports.default = new PackageSolutionPlugin();
//# sourceMappingURL=PackageSolutionPlugin.js.map