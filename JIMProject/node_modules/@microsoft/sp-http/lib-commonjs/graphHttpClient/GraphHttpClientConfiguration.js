"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.predefinedConfigurations = void 0;
var tslib_1 = require("tslib");
var HttpClient_1 = tslib_1.__importDefault(require("../httpClient/HttpClient"));
var HttpClientConfiguration_1 = tslib_1.__importDefault(require("../httpClient/HttpClientConfiguration"));
/**
 * Configuration for {@link _GraphHttpClient}.
 *
 * @remarks
 * The GraphHttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the GraphHttpClient class.  Normally these switches are set
 * (e.g. when calling GraphHttpClient.fetch()) by providing one of the predefined defaults
 * from GraphHttpClientConfigurations, however switches can also be changed via the
 * GraphHttpClientConfiguration.overrideWith() method.
 *
 * @deprecated The GraphHttpClient class has been superceded by the MSGraphClient class.
 * @internal
 */
var GraphHttpClientConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GraphHttpClientConfiguration, _super);
    /**
     * Constructs a new instance of GraphHttpClientCommonConfiguration with the specified flags.
     *
     * @remarks
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function GraphHttpClientConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    return GraphHttpClientConfiguration;
}(HttpClientConfiguration_1.default));
exports.default = GraphHttpClientConfiguration;
exports.predefinedConfigurations = {
    v1: new GraphHttpClientConfiguration(HttpClient_1.default.configurations.v1)
};
//# sourceMappingURL=GraphHttpClientConfiguration.js.map