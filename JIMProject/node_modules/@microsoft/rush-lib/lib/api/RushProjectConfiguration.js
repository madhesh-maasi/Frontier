"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushProjectConfiguration = exports.RUSH_PROJECT_CONFIGURATION_FILE = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const heft_config_file_1 = require("@rushstack/heft-config-file");
const rig_package_1 = require("@rushstack/rig-package");
const RushConstants_1 = require("../logic/RushConstants");
const OverlappingPathAnalyzer_1 = require("../utilities/OverlappingPathAnalyzer");
exports.RUSH_PROJECT_CONFIGURATION_FILE = new heft_config_file_1.ConfigurationFile({
    projectRelativeFilePath: `config/${RushConstants_1.RushConstants.rushProjectConfigFilename}`,
    jsonSchemaPath: path.resolve(__dirname, '..', 'schemas', 'rush-project.schema.json'),
    propertyInheritance: {
        projectOutputFolderNames: {
            inheritanceType: heft_config_file_1.InheritanceType.append
        },
        phaseOptions: {
            inheritanceType: heft_config_file_1.InheritanceType.custom,
            inheritanceFunction: (child, parent) => {
                if (!child) {
                    return parent;
                }
                else if (!parent) {
                    return child;
                }
                else {
                    // Merge the projectOutputFolderNames arrays
                    const resultPhaseOptionsByPhaseName = new Map();
                    for (const parentPhaseOptions of parent) {
                        resultPhaseOptionsByPhaseName.set(parentPhaseOptions.phaseName, parentPhaseOptions);
                    }
                    const childEncounteredPhaseNames = new Set();
                    for (const childPhaseOptions of child) {
                        const phaseName = childPhaseOptions.phaseName;
                        if (childEncounteredPhaseNames.has(phaseName)) {
                            // If the phase options already exist, but didn't come from the parent, then
                            // it shows up multiple times in the child.
                            const childSourceFilePath = exports.RUSH_PROJECT_CONFIGURATION_FILE.getObjectSourceFilePath(child);
                            throw new Error(`The phase "${phaseName}" occurs multiple times in the "phaseOptions" array ` +
                                `in "${childSourceFilePath}".`);
                        }
                        childEncounteredPhaseNames.add(phaseName);
                        let mergedPhaseOptions = resultPhaseOptionsByPhaseName.get(phaseName);
                        if (mergedPhaseOptions) {
                            // The parent phase options object already exists, so append to the projectOutputFolderNames
                            const projectOutputFolderNames = mergedPhaseOptions.projectOutputFolderNames && childPhaseOptions.projectOutputFolderNames
                                ? [
                                    ...mergedPhaseOptions.projectOutputFolderNames,
                                    ...childPhaseOptions.projectOutputFolderNames
                                ]
                                : mergedPhaseOptions.projectOutputFolderNames ||
                                    childPhaseOptions.projectOutputFolderNames;
                            mergedPhaseOptions = Object.assign(Object.assign(Object.assign({}, mergedPhaseOptions), childPhaseOptions), { projectOutputFolderNames });
                            resultPhaseOptionsByPhaseName.set(phaseName, mergedPhaseOptions);
                        }
                        else {
                            resultPhaseOptionsByPhaseName.set(phaseName, childPhaseOptions);
                        }
                    }
                    return Array.from(resultPhaseOptionsByPhaseName.values());
                }
            }
        },
        incrementalBuildIgnoredGlobs: {
            inheritanceType: heft_config_file_1.InheritanceType.replace
        },
        buildCacheOptions: {
            inheritanceType: heft_config_file_1.InheritanceType.custom,
            inheritanceFunction: (current, parent) => {
                if (!current) {
                    return parent;
                }
                else if (!parent) {
                    return current;
                }
                else {
                    return Object.assign(Object.assign(Object.assign({}, parent), current), { optionsForCommands: [
                            ...(parent.optionsForCommands || []),
                            ...(current.optionsForCommands || [])
                        ] });
                }
            }
        }
    }
});
/**
 * Use this class to load the "config/rush-project.json" config file.
 *
 * This file provides project-specific configuration options.
 * @public
 */
class RushProjectConfiguration {
    constructor(project, rushProjectJson, projectOutputFolderNamesForPhases) {
        var _a, _b;
        this.project = project;
        this.projectOutputFolderNamesForPhases = projectOutputFolderNamesForPhases;
        this.incrementalBuildIgnoredGlobs = rushProjectJson.incrementalBuildIgnoredGlobs;
        const optionsForCommandsByName = new Map();
        if ((_a = rushProjectJson.buildCacheOptions) === null || _a === void 0 ? void 0 : _a.optionsForCommands) {
            for (const cacheOptionsForCommand of rushProjectJson.buildCacheOptions.optionsForCommands) {
                optionsForCommandsByName.set(cacheOptionsForCommand.name, cacheOptionsForCommand);
            }
        }
        this.cacheOptions = {
            disableBuildCache: (_b = rushProjectJson.buildCacheOptions) === null || _b === void 0 ? void 0 : _b.disableBuildCache,
            optionsForCommandsByName
        };
    }
    /**
     * Loads the rush-project.json data for the specified project.
     */
    static async tryLoadForProjectAsync(project, repoCommandLineConfiguration, terminal) {
        // false is a signal that the project config does not exist
        const cacheEntry = RushProjectConfiguration._configCache.get(project);
        if (cacheEntry !== undefined) {
            return cacheEntry || undefined;
        }
        const rushProjectJson = await this._tryLoadJsonForProjectAsync(project, terminal);
        if (rushProjectJson) {
            const result = RushProjectConfiguration._getRushProjectConfiguration(project, rushProjectJson, repoCommandLineConfiguration, terminal);
            RushProjectConfiguration._configCache.set(project, result);
            return result;
        }
        else {
            RushProjectConfiguration._configCache.set(project, false);
            return undefined;
        }
    }
    /**
     * Load only the `incrementalBuildIgnoredGlobs` property from the rush-project.json file, skipping
     * validation of other parts of the config file.
     *
     * @remarks
     * This function exists to allow the ProjectChangeAnalyzer to load just the ignore globs without
     * having to validate the rest of the `rush-project.json` file against the repo's command-line configuration.
     */
    static async tryLoadIgnoreGlobsForProjectAsync(project, terminal) {
        const rushProjectJson = await this._tryLoadJsonForProjectAsync(project, terminal);
        return rushProjectJson === null || rushProjectJson === void 0 ? void 0 : rushProjectJson.incrementalBuildIgnoredGlobs;
    }
    static async _tryLoadJsonForProjectAsync(project, terminal) {
        const rigConfig = await rig_package_1.RigConfig.loadForProjectFolderAsync({
            projectFolderPath: project.projectFolder
        });
        const rushProjectJson = await exports.RUSH_PROJECT_CONFIGURATION_FILE.tryLoadConfigurationFileForProjectAsync(terminal, project.projectFolder, rigConfig);
        return rushProjectJson;
    }
    static _getRushProjectConfiguration(project, rushProjectJson, repoCommandLineConfiguration, terminal) {
        var _a;
        if (rushProjectJson.projectOutputFolderNames) {
            const overlappingPathAnalyzer = new OverlappingPathAnalyzer_1.OverlappingPathAnalyzer();
            const invalidFolderNames = [];
            for (const projectOutputFolder of rushProjectJson.projectOutputFolderNames) {
                if (projectOutputFolder.match(/[\\]/)) {
                    invalidFolderNames.push(projectOutputFolder);
                }
                const overlaps = !!overlappingPathAnalyzer.addPathAndGetFirstEncounteredLabels(projectOutputFolder, true);
                if (overlaps) {
                    terminal.writeErrorLine(`The project output folder name "${projectOutputFolder}" is invalid because it overlaps with another folder name.`);
                    throw new node_core_library_1.AlreadyReportedError();
                }
            }
            if (invalidFolderNames.length > 0) {
                terminal.writeErrorLine(`Invalid project configuration for project "${project.packageName}". Entries in ` +
                    '"projectOutputFolderNames" must not contain backslashes and the following entries do: ' +
                    invalidFolderNames.join(', '));
            }
        }
        const duplicateCommandNames = new Set();
        const invalidCommandNames = [];
        if ((_a = rushProjectJson.buildCacheOptions) === null || _a === void 0 ? void 0 : _a.optionsForCommands) {
            const commandNames = new Set();
            for (const [commandName, command] of repoCommandLineConfiguration.commands) {
                if (command.commandKind === RushConstants_1.RushConstants.phasedCommandKind) {
                    commandNames.add(commandName);
                }
            }
            const alreadyEncounteredCommandNames = new Set();
            for (const cacheOptionsForCommand of rushProjectJson.buildCacheOptions.optionsForCommands) {
                const commandName = cacheOptionsForCommand.name;
                if (!commandNames.has(commandName)) {
                    invalidCommandNames.push(commandName);
                }
                else if (alreadyEncounteredCommandNames.has(commandName)) {
                    duplicateCommandNames.add(commandName);
                }
                else {
                    alreadyEncounteredCommandNames.add(commandName);
                }
            }
        }
        if (invalidCommandNames.length > 0) {
            terminal.writeErrorLine(`Invalid project configuration fpr project "${project.packageName}". The following ` +
                'command names in cacheOptions.optionsForCommands are not specified in this repo: ' +
                invalidCommandNames.join(', '));
        }
        if (duplicateCommandNames.size > 0) {
            terminal.writeErrorLine(`Invalid project configuration fpr project "${project.packageName}". The following ` +
                'command names in cacheOptions.optionsForCommands are specified more than once: ' +
                Array.from(duplicateCommandNames).join(', '));
        }
        const projectOutputFolderNamesForPhases = new Map();
        if (rushProjectJson.projectOutputFolderNames) {
            projectOutputFolderNamesForPhases.set(RushConstants_1.RushConstants.buildCommandName, rushProjectJson.projectOutputFolderNames);
        }
        if (rushProjectJson.phaseOptions) {
            const overlappingPathAnalyzer = new OverlappingPathAnalyzer_1.OverlappingPathAnalyzer();
            const phaseOptionsByPhase = new Map();
            for (const phaseOptions of rushProjectJson.phaseOptions) {
                const phaseName = phaseOptions.phaseName;
                const existingPhaseOptions = phaseOptionsByPhase.get(phaseName);
                if (existingPhaseOptions) {
                    const existingPhaseOptionsJsonPath = exports.RUSH_PROJECT_CONFIGURATION_FILE.getObjectSourceFilePath(existingPhaseOptions);
                    const phaseOptionsJsonPath = exports.RUSH_PROJECT_CONFIGURATION_FILE.getObjectSourceFilePath(phaseOptions);
                    let errorMessage = `The phase "${phaseName}" appears multiple times in the "${project.packageName}" project's ` +
                        `${exports.RUSH_PROJECT_CONFIGURATION_FILE.projectRelativeFilePath} file's ` +
                        'phaseOptions property.';
                    if (existingPhaseOptionsJsonPath && phaseOptionsJsonPath) {
                        if (existingPhaseOptionsJsonPath !== phaseOptionsJsonPath) {
                            errorMessage +=
                                ` It first appears in "${existingPhaseOptionsJsonPath}" and again ` +
                                    `in "${phaseOptionsJsonPath}".`;
                        }
                        else if (!node_core_library_1.Path.convertToSlashes(existingPhaseOptionsJsonPath).startsWith(node_core_library_1.Path.convertToSlashes(project.projectFolder))) {
                            errorMessage += ` It appears multiple times in "${phaseOptionsJsonPath}".`;
                        }
                    }
                    terminal.writeErrorLine(errorMessage);
                }
                else if (!repoCommandLineConfiguration.phases.has(phaseName)) {
                    terminal.writeErrorLine(`Invalid "${exports.RUSH_PROJECT_CONFIGURATION_FILE.projectRelativeFilePath}"` +
                        ` for project "${project.packageName}". Phase "${phaseName}" is not defined in the repo's ${RushConstants_1.RushConstants.commandLineFilename}.`);
                }
                else {
                    phaseOptionsByPhase.set(phaseOptions.phaseName, phaseOptions);
                    if (phaseOptions.projectOutputFolderNames) {
                        projectOutputFolderNamesForPhases.set(phaseOptions.phaseName, phaseOptions.projectOutputFolderNames);
                    }
                }
                if (phaseOptions.projectOutputFolderNames) {
                    for (const projectOutputFolderName of phaseOptions.projectOutputFolderNames) {
                        const overlappingPhaseNames = overlappingPathAnalyzer.addPathAndGetFirstEncounteredLabels(projectOutputFolderName, phaseName);
                        if (overlappingPhaseNames) {
                            const overlapsWithOwnPhase = overlappingPhaseNames === null || overlappingPhaseNames === void 0 ? void 0 : overlappingPhaseNames.includes(phaseName);
                            if (overlapsWithOwnPhase) {
                                if (overlappingPhaseNames.length === 1) {
                                    terminal.writeErrorLine(`Invalid "${exports.RUSH_PROJECT_CONFIGURATION_FILE.projectRelativeFilePath}" ` +
                                        `for project "${project.packageName}". The project output folder name "${projectOutputFolderName}" in ` +
                                        `phase ${phaseName} overlaps with another folder name in the same phase.`);
                                }
                                else {
                                    const otherPhaseNames = overlappingPhaseNames.filter((overlappingPhaseName) => overlappingPhaseName !== phaseName);
                                    terminal.writeErrorLine(`Invalid "${exports.RUSH_PROJECT_CONFIGURATION_FILE.projectRelativeFilePath}" ` +
                                        `for project "${project.packageName}". The project output folder name "${projectOutputFolderName}" in ` +
                                        `phase ${phaseName} overlaps with other folder names in the same phase and with ` +
                                        `folder names in the following other phases: ${otherPhaseNames.join(', ')}.`);
                                }
                            }
                            else {
                                terminal.writeErrorLine(`Invalid "${exports.RUSH_PROJECT_CONFIGURATION_FILE.projectRelativeFilePath}" ` +
                                    `for project "${project.packageName}". The project output folder name "${projectOutputFolderName}" in ` +
                                    `phase ${phaseName} overlaps with other folder name(s) in the following other phases: ` +
                                    `${overlappingPhaseNames.join(', ')}.`);
                            }
                            throw new node_core_library_1.AlreadyReportedError();
                        }
                    }
                }
            }
        }
        return new RushProjectConfiguration(project, rushProjectJson, projectOutputFolderNamesForPhases);
    }
}
exports.RushProjectConfiguration = RushProjectConfiguration;
RushProjectConfiguration._configCache = new Map();
//# sourceMappingURL=RushProjectConfiguration.js.map