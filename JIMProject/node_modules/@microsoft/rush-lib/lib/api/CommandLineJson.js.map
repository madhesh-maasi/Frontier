{"version":3,"file":"CommandLineJson.js","sourceRoot":"","sources":["../../src/api/CommandLineJson.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * \"baseCommand\" from command-line.schema.json\n */\nexport interface IBaseCommandJson {\n  commandKind: 'bulk' | 'global' | 'phased';\n  name: string;\n  summary: string;\n  /**\n   * If omitted, the summary will be used instead.\n   */\n  description?: string;\n  safeForSimultaneousRushProcesses: boolean;\n  autoinstallerName?: string;\n}\n\n/**\n * \"bulkCommand\" from command-line.schema.json\n */\nexport interface IBulkCommandJson extends IBaseCommandJson {\n  commandKind: 'bulk';\n  enableParallelism: boolean;\n  ignoreDependencyOrder?: boolean;\n  ignoreMissingScript?: boolean;\n  incremental?: boolean;\n  allowWarningsInSuccessfulBuild?: boolean;\n  watchForChanges?: boolean;\n  disableBuildCache?: boolean;\n}\n\n/**\n * \"phasedCommand\" from command-line.schema.json\n */\nexport interface IPhasedCommandJson extends IBaseCommandJson {\n  commandKind: 'phased';\n  enableParallelism: boolean;\n  incremental?: boolean;\n  phases: string[];\n  skipPhasesForCommand?: string[];\n}\n\n/**\n * \"globalCommand\" from command-line.schema.json\n */\nexport interface IGlobalCommandJson extends IBaseCommandJson {\n  commandKind: 'global';\n  shellCommand: string;\n}\n\nexport type CommandJson = IBulkCommandJson | IGlobalCommandJson | IPhasedCommandJson;\n\nexport interface IPhaseDependencies {\n  self?: string[];\n  upstream?: string[];\n}\n\nexport interface IPhaseJson {\n  name: string;\n  dependencies?: IPhaseDependencies;\n  ignoreMissingScript?: boolean;\n  allowWarningsOnSuccess?: boolean;\n}\n\n/**\n * \"baseParameter\" from command-line.schema.json\n */\nexport interface IBaseParameterJson {\n  parameterKind: 'flag' | 'choice' | 'string';\n  longName: string;\n  shortName?: string;\n  description: string;\n  associatedCommands?: string[];\n  associatedPhases?: string[];\n  required?: boolean;\n}\n\n/**\n * \"flagParameter\" from command-line.schema.json\n */\nexport interface IFlagParameterJson extends IBaseParameterJson {\n  parameterKind: 'flag';\n  addPhasesToCommand?: string[];\n  skipPhasesForCommand?: string[];\n}\n\n/**\n * Part of \"choiceParameter\" from command-line.schema.json\n */\nexport interface IChoiceParameterAlternativeJson {\n  name: string;\n  description: string;\n}\n\n/**\n * \"choiceParameter\" from command-line.schema.json\n */\nexport interface IChoiceParameterJson extends IBaseParameterJson {\n  parameterKind: 'choice';\n  alternatives: IChoiceParameterAlternativeJson[];\n  defaultValue?: string;\n}\n\nexport interface IStringParameterJson extends IBaseParameterJson {\n  parameterKind: 'string';\n  argumentName: string;\n}\n\nexport type ParameterJson = IFlagParameterJson | IChoiceParameterJson | IStringParameterJson;\n\n/**\n * Interfaces for the file format described by command-line.schema.json\n */\nexport interface ICommandLineJson {\n  commands?: CommandJson[];\n  phases?: IPhaseJson[];\n  parameters?: ParameterJson[];\n}\n"]}