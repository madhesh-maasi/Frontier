{"version":3,"file":"RushConfigurationProject.js","sourceRoot":"","sources":["../../src/api/RushConfigurationProject.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  JsonFile,\n  IPackageJson,\n  FileSystem,\n  FileConstants,\n  IPackageJsonDependencyTable\n} from '@rushstack/node-core-library';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { VersionPolicy, LockStepVersionPolicy } from './VersionPolicy';\nimport { PackageJsonEditor } from './PackageJsonEditor';\nimport { RushConstants } from '../logic/RushConstants';\nimport { PackageNameParsers } from './PackageNameParsers';\nimport { DependencySpecifier, DependencySpecifierType } from '../logic/DependencySpecifier';\nimport { Selection } from '../logic/Selection';\n\n/**\n * This represents the JSON data object for a project entry in the rush.json configuration file.\n */\nexport interface IRushConfigurationProjectJson {\n  packageName: string;\n  projectFolder: string;\n  reviewCategory?: string;\n  cyclicDependencyProjects: string[];\n  versionPolicyName?: string;\n  shouldPublish?: boolean;\n  skipRushCheck?: boolean;\n  publishFolder?: string;\n}\n\n/**\n * This represents the configuration of a project that is built by Rush, based on\n * the Rush.json configuration file.\n * @public\n */\nexport class RushConfigurationProject {\n  private _packageName: string;\n  private _projectFolder: string;\n  private _projectRelativeFolder: string;\n  private _projectRushConfigFolder: string;\n  private _projectRushTempFolder: string;\n  private _reviewCategory: string | undefined;\n  private _packageJson: IPackageJson;\n  private _packageJsonEditor: PackageJsonEditor;\n  private _tempProjectName: string;\n  private _unscopedTempProjectName: string;\n  private _cyclicDependencyProjects: Set<string>;\n  private _versionPolicyName: string | undefined;\n  private _versionPolicy: VersionPolicy | undefined;\n  private _shouldPublish: boolean;\n  private _skipRushCheck: boolean;\n  private _publishFolder: string;\n  private _dependencyProjects: ReadonlySet<RushConfigurationProject> | undefined;\n  private _consumingProjects: ReadonlySet<RushConfigurationProject> | undefined;\n  private readonly _rushConfiguration: RushConfiguration;\n\n  /**\n   * A set of projects within the Rush configuration which directly consume this package.\n   *\n   * @remarks\n   * Writable because it is mutated by RushConfiguration during initialization.\n   * @internal\n   */\n  public readonly _consumingProjectNames: Set<string>;\n\n  /** @internal */\n  public constructor(\n    projectJson: IRushConfigurationProjectJson,\n    rushConfiguration: RushConfiguration,\n    tempProjectName: string\n  ) {\n    this._rushConfiguration = rushConfiguration;\n    this._packageName = projectJson.packageName;\n    this._projectRelativeFolder = projectJson.projectFolder;\n\n    // For example, the depth of \"a/b/c\" would be 3.  The depth of \"a\" is 1.\n    const projectFolderDepth: number = projectJson.projectFolder.split('/').length;\n    if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {\n      throw new Error(\n        `To keep things organized, this repository has a projectFolderMinDepth policy` +\n          ` requiring project folders to be at least ${rushConfiguration.projectFolderMinDepth} levels deep.` +\n          `  Problem folder: \"${projectJson.projectFolder}\"`\n      );\n    }\n    if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {\n      throw new Error(\n        `To keep things organized, this repository has a projectFolderMaxDepth policy` +\n          ` preventing project folders from being deeper than ${rushConfiguration.projectFolderMaxDepth} levels.` +\n          `  Problem folder:  \"${projectJson.projectFolder}\"`\n      );\n    }\n\n    this._projectFolder = path.join(rushConfiguration.rushJsonFolder, projectJson.projectFolder);\n\n    if (!FileSystem.exists(this._projectFolder)) {\n      throw new Error(`Project folder not found: ${projectJson.projectFolder}`);\n    }\n\n    this._projectRushConfigFolder = path.join(this._projectFolder, 'config', 'rush');\n    this._projectRushTempFolder = path.join(\n      this._projectFolder,\n      RushConstants.projectRushFolderName,\n      RushConstants.rushTempFolderName\n    );\n\n    // Are we using a package review file?\n    if (rushConfiguration.approvedPackagesPolicy.enabled) {\n      // If so, then every project needs to have a reviewCategory that was defined\n      // by the reviewCategories array.\n      if (!projectJson.reviewCategory) {\n        throw new Error(\n          `The \"approvedPackagesPolicy\" feature is enabled rush.json, but a reviewCategory` +\n            ` was not specified for the project \"${projectJson.packageName}\".`\n        );\n      }\n      if (!rushConfiguration.approvedPackagesPolicy.reviewCategories.has(projectJson.reviewCategory)) {\n        throw new Error(\n          `The project \"${projectJson.packageName}\" specifies its reviewCategory as` +\n            `\"${projectJson.reviewCategory}\" which is not one of the defined reviewCategories.`\n        );\n      }\n      this._reviewCategory = projectJson.reviewCategory;\n    }\n\n    const packageJsonFilename: string = path.join(this._projectFolder, FileConstants.PackageJson);\n    this._packageJson = JsonFile.load(packageJsonFilename);\n\n    if (this._packageJson.name !== this._packageName) {\n      throw new Error(\n        `The package name \"${this._packageName}\" specified in rush.json does not` +\n          ` match the name \"${this._packageJson.name}\" from package.json`\n      );\n    }\n\n    this._packageJsonEditor = PackageJsonEditor.fromObject(this._packageJson, packageJsonFilename);\n\n    this._tempProjectName = tempProjectName;\n\n    // The \"rushProject.tempProjectName\" is guaranteed to be unique name (e.g. by adding the \"-2\"\n    // suffix).  Even after we strip the NPM scope, it will still be unique.\n    // Example: \"my-project-2\"\n    this._unscopedTempProjectName = PackageNameParsers.permissive.getUnscopedName(tempProjectName);\n\n    this._cyclicDependencyProjects = new Set<string>();\n    if (projectJson.cyclicDependencyProjects) {\n      for (const cyclicDependencyProject of projectJson.cyclicDependencyProjects) {\n        this._cyclicDependencyProjects.add(cyclicDependencyProject);\n      }\n    }\n    this._shouldPublish = !!projectJson.shouldPublish;\n    this._skipRushCheck = !!projectJson.skipRushCheck;\n    this._consumingProjectNames = new Set();\n    this._versionPolicyName = projectJson.versionPolicyName;\n\n    this._publishFolder = this._projectFolder;\n    if (projectJson.publishFolder) {\n      this._publishFolder = path.join(this._publishFolder, projectJson.publishFolder);\n    }\n  }\n\n  /**\n   * The name of the NPM package.  An error is reported if this name is not\n   * identical to packageJson.name.\n   *\n   * Example: `@scope/MyProject`\n   */\n  public get packageName(): string {\n    return this._packageName;\n  }\n\n  /**\n   * The full path of the folder that contains the project to be built by Rush.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project`\n   */\n  public get projectFolder(): string {\n    return this._projectFolder;\n  }\n\n  /**\n   * The relative path of the folder that contains the project to be built by Rush.\n   *\n   * Example: `libraries/my-project`\n   */\n  public get projectRelativeFolder(): string {\n    return this._projectRelativeFolder;\n  }\n\n  /**\n   * The project-specific Rush configuration folder.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\config\\rush`\n   */\n  public get projectRushConfigFolder(): string {\n    return this._projectRushConfigFolder;\n  }\n\n  /**\n   * The project-specific Rush temp folder. This folder is used to store Rush-specific temporary files.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\.rush\\temp`\n   */\n  public get projectRushTempFolder(): string {\n    return this._projectRushTempFolder;\n  }\n\n  /**\n   * The Rush configuration for the monorepo that the project belongs to.\n   */\n  public get rushConfiguration(): RushConfiguration {\n    return this._rushConfiguration;\n  }\n\n  /**\n   * The review category name, or undefined if no category was assigned.\n   * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.\n   */\n  public get reviewCategory(): string | undefined {\n    return this._reviewCategory;\n  }\n\n  /**\n   * A list of local projects that appear as devDependencies for this project, but cannot be\n   * locally linked because it would create a cyclic dependency; instead, the last published\n   * version will be installed in the Common folder.\n   *\n   * These are package names that would be found by RushConfiguration.getProjectByName().\n   */\n  public get cyclicDependencyProjects(): Set<string> {\n    return this._cyclicDependencyProjects;\n  }\n\n  /**\n   * An array of projects within the Rush configuration which directly depend on this package.\n   * @deprecated Use `consumingProjectNames` instead, as it has Set semantics, which better reflect the nature\n   * of the data.\n   */\n  public get downstreamDependencyProjects(): string[] {\n    return [...this._consumingProjectNames];\n  }\n\n  /**\n   * An array of projects within the Rush configuration which this project declares as dependencies.\n   * @deprecated Use `dependencyProjects` instead, as it has Set semantics, which better reflect the nature\n   * of the data.\n   */\n  public get localDependencyProjects(): ReadonlyArray<RushConfigurationProject> {\n    return [...this.dependencyProjects];\n  }\n\n  /**\n   * The set of projects within the Rush configuration which this project declares as dependencies.\n   *\n   * @remarks\n   * Can be used recursively to walk the project dependency graph to find all projects that are directly or indirectly\n   * referenced from this project.\n   */\n  public get dependencyProjects(): ReadonlySet<RushConfigurationProject> {\n    if (!this._dependencyProjects) {\n      this._dependencyProjects = Selection.union(\n        this._getDependencyProjects(this.packageJson.dependencies),\n        this._getDependencyProjects(this.packageJson.devDependencies),\n        this._getDependencyProjects(this.packageJson.optionalDependencies)\n      );\n    }\n    return this._dependencyProjects;\n  }\n\n  /**\n   * The set of projects within the Rush configuration which declare this project as a dependency.\n   * Excludes those that declare this project as a `cyclicDependencyProject`.\n   *\n   * @remarks\n   * This field is the counterpart to `dependencyProjects`, and can be used recursively to walk the project dependency\n   * graph to find all projects which will be impacted by changes to this project.\n   */\n  public get consumingProjects(): ReadonlySet<RushConfigurationProject> {\n    if (!this._consumingProjects) {\n      this._consumingProjects = this._getConsumingProjects();\n    }\n    return this._consumingProjects;\n  }\n\n  /**\n   * The parsed NPM \"package.json\" file from projectFolder.\n   * @deprecated Use packageJsonEditor instead\n   */\n  public get packageJson(): IPackageJson {\n    return this._packageJson;\n  }\n\n  /**\n   * A useful wrapper around the package.json file for making modifications\n   * @beta\n   */\n  public get packageJsonEditor(): PackageJsonEditor {\n    return this._packageJsonEditor;\n  }\n\n  /**\n   * The unique name for the temporary project that will be generated in the Common folder.\n   * For example, if the project name is `@scope/MyProject`, the temporary project name\n   * might be `@rush-temp/MyProject-2`.\n   *\n   * Example: `@rush-temp/MyProject-2`\n   */\n  public get tempProjectName(): string {\n    return this._tempProjectName;\n  }\n\n  /**\n   * The unscoped temporary project name\n   *\n   * Example: `my-project-2`\n   */\n  public get unscopedTempProjectName(): string {\n    return this._unscopedTempProjectName;\n  }\n\n  /**\n   * A flag which indicates whether changes to this project should be published. This controls\n   * whether or not the project would show up when running `rush change`, and whether or not it\n   * should be published during `rush publish`.\n   */\n  public get shouldPublish(): boolean {\n    return this._shouldPublish || !!this._versionPolicyName;\n  }\n\n  /**\n   * If true, then this project will be ignored by the \"rush check\" command.\n   * The default value is false.\n   */\n  public get skipRushCheck(): boolean {\n    return this._skipRushCheck;\n  }\n\n  /**\n   * Name of the version policy used by this project.\n   * @beta\n   */\n  public get versionPolicyName(): string | undefined {\n    return this._versionPolicyName;\n  }\n\n  /**\n   * The full path of the folder that will get published by Rush.\n   *\n   * @remarks\n   * By default this is the same as the project folder, but a custom folder can be specified\n   * using the the \"publishFolder\" setting in rush.json.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\temp\\publish`\n   */\n  public get publishFolder(): string {\n    return this._publishFolder;\n  }\n\n  /**\n   * Version policy of the project\n   * @beta\n   */\n  public get versionPolicy(): VersionPolicy | undefined {\n    if (!this._versionPolicy) {\n      if (this.versionPolicyName && this._rushConfiguration.versionPolicyConfiguration) {\n        this._versionPolicy = this._rushConfiguration.versionPolicyConfiguration.getVersionPolicy(\n          this.versionPolicyName\n        );\n      }\n    }\n    return this._versionPolicy;\n  }\n\n  /**\n   * Indicate whether this project is the main project for the related version policy.\n   *\n   * False if the project is not for publishing.\n   * True if the project is individually versioned or if its lockstep version policy does not specify main project.\n   * False if the project is lockstepped and is not the main project for its version policy.\n   *\n   * @beta\n   */\n  public get isMainProject(): boolean {\n    if (!this.shouldPublish) {\n      return false;\n    }\n    let isMain: boolean = true;\n    if (this.versionPolicy && this.versionPolicy.isLockstepped) {\n      const lockStepPolicy: LockStepVersionPolicy = this.versionPolicy as LockStepVersionPolicy;\n      if (lockStepPolicy.mainProject && lockStepPolicy.mainProject !== this.packageName) {\n        isMain = false;\n      }\n    }\n    return isMain;\n  }\n\n  /**\n   * Compute the local rush projects that this project immediately depends on,\n   * according to the specific dependency group from package.json\n   */\n  private _getDependencyProjects(\n    dependencies: IPackageJsonDependencyTable = {}\n  ): Set<RushConfigurationProject> {\n    const dependencyProjects: Set<RushConfigurationProject> = new Set();\n    for (const dependency of Object.keys(dependencies)) {\n      // Skip if we can't find the local project or it's a cyclic dependency\n      const localProject: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(dependency);\n      if (localProject && !this._cyclicDependencyProjects.has(dependency)) {\n        // Set the value if it's a workspace project, or if we have a local project and the semver is satisfied\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(\n          dependency,\n          dependencies[dependency]\n        );\n        switch (dependencySpecifier.specifierType) {\n          case DependencySpecifierType.Version:\n          case DependencySpecifierType.Range:\n            if (semver.satisfies(localProject.packageJson.version, dependencySpecifier.versionSpecifier)) {\n              dependencyProjects.add(localProject);\n            }\n            break;\n          case DependencySpecifierType.Workspace:\n            dependencyProjects.add(localProject);\n            break;\n        }\n      }\n    }\n    return dependencyProjects;\n  }\n\n  /**\n   * Compute the local rush projects that declare this project as a dependency\n   */\n  private _getConsumingProjects(): Set<RushConfigurationProject> {\n    const consumingProjects: Set<RushConfigurationProject> = new Set();\n    for (const projectName of this._consumingProjectNames) {\n      const localProject: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(projectName);\n      if (localProject && localProject.dependencyProjects.has(this)) {\n        consumingProjects.add(localProject);\n      }\n    }\n    return consumingProjects;\n  }\n}\n"]}