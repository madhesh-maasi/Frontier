{"version":3,"file":"PackageJsonUpdater.js","sourceRoot":"","sources":["../../src/logic/PackageJsonUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as semver from 'semver';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { BaseInstallManager, IInstallManagerOptions } from './base/BaseInstallManager';\nimport { InstallManagerFactory } from './InstallManagerFactory';\nimport { VersionMismatchFinder } from './versionMismatch/VersionMismatchFinder';\nimport { PurgeManager } from './PurgeManager';\nimport { Utilities } from '../utilities/Utilities';\nimport { DependencyType, PackageJsonDependency } from '../api/PackageJsonEditor';\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { VersionMismatchFinderEntity } from './versionMismatch/VersionMismatchFinderEntity';\nimport { VersionMismatchFinderProject } from './versionMismatch/VersionMismatchFinderProject';\nimport { RushConstants } from './RushConstants';\nimport { InstallHelpers } from './installManager/InstallHelpers';\n\n/**\n * The type of SemVer range specifier that is prepended to the version\n */\nexport const enum SemVerStyle {\n  Exact = 'exact',\n  Caret = 'caret',\n  Tilde = 'tilde',\n  Passthrough = 'passthrough'\n}\n\n/**\n * Options for adding a dependency to a particular project.\n */\nexport interface IPackageJsonUpdaterRushAddOptions {\n  /**\n   * The projects whose package.jsons should get updated\n   */\n  projects: RushConfigurationProject[];\n  /**\n   * The name list of the dependencies to be added\n   */\n  packageNames: string[];\n  /**\n   * The initial version specifier mapped by package name.\n   * If undefined, the latest version will be used (that doesn't break ensureConsistentVersions).\n   * If specified, the latest version meeting the SemVer specifier will be used as the basis.\n   */\n  initialVersions: Map<string, string | undefined>;\n  /**\n   * Whether or not this dependency should be added as a devDependency or a regular dependency.\n   */\n  devDependency: boolean;\n  /**\n   * If specified, other packages that use this dependency will also have their package.json's updated.\n   */\n  updateOtherPackages: boolean;\n  /**\n   * If specified, \"rush update\" will not be run after updating the package.json file(s).\n   */\n  skipUpdate: boolean;\n  /**\n   * If specified, \"rush update\" will be run in debug mode.\n   */\n  debugInstall: boolean;\n  /**\n   * The map contains the style of range that should be used if the version is automatically detected.\n   * which are indexed by package name\n   */\n  rangeStyles: Map<string, SemVerStyle>;\n  /**\n   * The variant to consider when performing installations and validating shrinkwrap updates.\n   */\n  variant?: string | undefined;\n}\n\n/**\n * Configuration options for adding or updating a dependency in a single project\n */\nexport interface IUpdateProjectOptions {\n  /**\n   * The project which will have its package.json updated\n   */\n  project: VersionMismatchFinderEntity;\n  /**\n   * Map of packages to update\n   * Its key is the name of the dependency to be added or updated in the project\n   * Its value is the new SemVer specifier that should be added to the project's package.json\n   */\n  updatePackages: Record<string, string>;\n  /**\n   * The type of dependency that should be updated. If left empty, this will be auto-detected.\n   * If it cannot be auto-detected an exception will be thrown.\n   */\n  dependencyType?: DependencyType;\n}\n\n/**\n * A helper class for managing the dependencies of various package.json files.\n * @internal\n */\nexport class PackageJsonUpdater {\n  private _rushConfiguration: RushConfiguration;\n  private _rushGlobalFolder: RushGlobalFolder;\n\n  public constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder) {\n    this._rushConfiguration = rushConfiguration;\n    this._rushGlobalFolder = rushGlobalFolder;\n  }\n\n  /**\n   * Adds a dependency to a particular project. The core business logic for \"rush add\".\n   */\n  public async doRushAdd(options: IPackageJsonUpdaterRushAddOptions): Promise<void> {\n    const {\n      projects,\n      packageNames,\n      initialVersions,\n      devDependency,\n      updateOtherPackages,\n      skipUpdate,\n      debugInstall,\n      rangeStyles,\n      variant\n    } = options;\n\n    const implicitlyPinned: Map<string, string> =\n      this._rushConfiguration.getImplicitlyPreferredVersions(variant);\n    const purgeManager: PurgeManager = new PurgeManager(this._rushConfiguration, this._rushGlobalFolder);\n    const installManagerOptions: IInstallManagerOptions = {\n      debug: debugInstall,\n      allowShrinkwrapUpdates: true,\n      bypassPolicy: false,\n      noLink: false,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      networkConcurrency: undefined,\n      collectLogFile: false,\n      variant: variant,\n      maxInstallAttempts: RushConstants.defaultMaxInstallAttempts,\n      pnpmFilterArguments: [],\n      checkOnly: false\n    };\n    const installManager: BaseInstallManager = InstallManagerFactory.getInstallManager(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      purgeManager,\n      installManagerOptions\n    );\n\n    console.log();\n    const updatePackages: Record<string, string> = {};\n    for (const packageName of packageNames) {\n      const initialVersion: string | undefined = initialVersions.get(packageName);\n      const rangeStyle: SemVerStyle = rangeStyles.get(packageName)!;\n      const version: string = await this._getNormalizedVersionSpec(\n        projects,\n        installManager,\n        packageName,\n        initialVersion,\n        implicitlyPinned.get(packageName),\n        rangeStyle\n      );\n      updatePackages[packageName] = version;\n      console.log(colors.green(`Updating projects to use `) + packageName + '@' + colors.cyan(version));\n      console.log();\n    }\n\n    const allPackageUpdates: IUpdateProjectOptions[] = [];\n\n    for (const project of projects) {\n      const currentProjectUpdate: IUpdateProjectOptions = {\n        project: new VersionMismatchFinderProject(project),\n        updatePackages,\n        dependencyType: devDependency ? DependencyType.Dev : undefined\n      };\n      this.updateProject(currentProjectUpdate);\n\n      const otherPackageUpdates: IUpdateProjectOptions[] = [];\n\n      if (this._rushConfiguration.ensureConsistentVersions || updateOtherPackages) {\n        // we need to do a mismatch check\n        const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\n          this._rushConfiguration,\n          {\n            variant: variant\n          }\n        );\n\n        const mismatches: string[] = mismatchFinder.getMismatches().filter((mismatch) => {\n          return !projects.find((proj) => proj.packageName === mismatch);\n        });\n        if (mismatches.length) {\n          if (!updateOtherPackages) {\n            const updatePackagesLiteral: string = Object.entries(updatePackages)\n              .map(([packageName, version]) => `${packageName}@${version}`)\n              .join(',');\n            throw new Error(\n              `Adding '${updatePackagesLiteral}' to ${project.packageName}` +\n                ` causes mismatched dependencies. Use the \"--make-consistent\" flag to update other packages to use` +\n                ` this version, or do not specify a SemVer range.`\n            );\n          }\n\n          // otherwise we need to go update a bunch of other projects\n          for (const [packageName, version] of Object.entries(updatePackages)) {\n            const mismatchedVersions: string[] | undefined = mismatchFinder.getVersionsOfMismatch(\n              packageName\n            );\n            if (mismatchedVersions) {\n              for (const mismatchedVersion of mismatchedVersions) {\n                for (const consumer of mismatchFinder.getConsumersOfMismatch(\n                  packageName,\n                  mismatchedVersion\n                )!) {\n                  if (consumer instanceof VersionMismatchFinderProject) {\n                    otherPackageUpdates.push({\n                      project: consumer,\n                      updatePackages: {\n                        [packageName]: version\n                      }\n                    });\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.updateProjects(otherPackageUpdates);\n\n      allPackageUpdates.push(currentProjectUpdate, ...otherPackageUpdates);\n    }\n\n    for (const { project } of allPackageUpdates) {\n      if (project.saveIfModified()) {\n        console.log(colors.green('Wrote ') + project.filePath);\n      }\n    }\n\n    if (!skipUpdate) {\n      console.log();\n      console.log(colors.green('Running \"rush update\"'));\n      console.log();\n      try {\n        await installManager.doInstallAsync();\n      } finally {\n        purgeManager.deleteAll();\n      }\n    }\n  }\n\n  /**\n   * Updates several projects' package.json files\n   */\n  public updateProjects(projectUpdates: IUpdateProjectOptions[]): void {\n    for (const update of projectUpdates) {\n      this.updateProject(update);\n    }\n  }\n\n  /**\n   * Updates a single project's package.json file\n   */\n  public updateProject(options: IUpdateProjectOptions): void {\n    let { dependencyType } = options;\n    const { project, updatePackages } = options;\n\n    for (const [packageName, newVersion] of Object.entries(updatePackages)) {\n      const oldDependency: PackageJsonDependency | undefined = project.tryGetDependency(packageName);\n      const oldDevDependency: PackageJsonDependency | undefined = project.tryGetDevDependency(packageName);\n\n      const oldDependencyType: DependencyType | undefined = oldDevDependency\n        ? oldDevDependency.dependencyType\n        : oldDependency\n        ? oldDependency.dependencyType\n        : undefined;\n\n      dependencyType = dependencyType || oldDependencyType || DependencyType.Regular;\n\n      project.addOrUpdateDependency(packageName, newVersion, dependencyType!);\n    }\n  }\n\n  /**\n   * Selects an appropriate version number for a particular package, given an optional initial SemVer spec.\n   * If ensureConsistentVersions, tries to pick a version that will be consistent.\n   * Otherwise, will choose the latest semver matching the initialSpec and append the proper range style.\n   * @param projects - the projects which will have their package.json's updated\n   * @param packageName - the name of the package to be used\n   * @param initialSpec - a semver pattern that should be used to find the latest version matching the spec\n   * @param implicitlyPinnedVersion - the implicitly preferred (aka common/primary) version of the package in use\n   * @param rangeStyle - if this version is selected by querying registry, then this range specifier is prepended to\n   *   the selected version.\n   */\n  private async _getNormalizedVersionSpec(\n    projects: RushConfigurationProject[],\n    installManager: BaseInstallManager,\n    packageName: string,\n    initialSpec: string | undefined,\n    implicitlyPinnedVersion: string | undefined,\n    rangeStyle: SemVerStyle\n  ): Promise<string> {\n    console.log(colors.gray(`Determining new version for dependency: ${packageName}`));\n    if (initialSpec) {\n      console.log(`Specified version selector: ${colors.cyan(initialSpec)}`);\n    } else {\n      console.log(`No version selector was specified, so the version will be determined automatically.`);\n    }\n    console.log();\n\n    // determine if the package is a project in the local repository and if the version exists\n    const localProject: RushConfigurationProject | undefined = this._tryGetLocalProject(\n      packageName,\n      projects\n    );\n\n    // if ensureConsistentVersions => reuse the pinned version\n    // else, query the registry and use the latest that satisfies semver spec\n    if (initialSpec && implicitlyPinnedVersion && initialSpec === implicitlyPinnedVersion) {\n      console.log(\n        colors.green('Assigning \"') +\n          colors.cyan(initialSpec) +\n          colors.green(\n            `\" for \"${packageName}\" because it matches what other projects are using in this repo.`\n          )\n      );\n      return initialSpec;\n    }\n\n    if (this._rushConfiguration.ensureConsistentVersions && !initialSpec && implicitlyPinnedVersion) {\n      console.log(\n        `Assigning the version range \"${colors.cyan(implicitlyPinnedVersion)}\" for \"${packageName}\" because` +\n          ` it is already used by other projects in this repo.`\n      );\n      return implicitlyPinnedVersion;\n    }\n\n    await InstallHelpers.ensureLocalPackageManager(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      RushConstants.defaultMaxInstallAttempts\n    );\n\n    const useWorkspaces: boolean = !!(\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces\n    );\n    const workspacePrefix: string = 'workspace:';\n\n    // Trim 'workspace:' notation from the spec, since we're going to be tweaking the range\n    if (useWorkspaces && initialSpec && initialSpec.startsWith(workspacePrefix)) {\n      initialSpec = initialSpec.substring(workspacePrefix.length).trim();\n    }\n\n    let selectedVersion: string | undefined;\n    let selectedVersionPrefix: string = '';\n\n    if (initialSpec && initialSpec !== 'latest') {\n      console.log(colors.gray('Finding versions that satisfy the selector: ') + initialSpec);\n      console.log();\n\n      if (localProject !== undefined) {\n        const version: string = localProject.packageJson.version;\n        if (semver.satisfies(version, initialSpec)) {\n          // For workspaces, assume that specifying the exact version means you always want to consume\n          // the local project. Otherwise, use the exact local package version\n          if (useWorkspaces) {\n            selectedVersion = initialSpec === version ? '*' : initialSpec;\n            selectedVersionPrefix = workspacePrefix;\n          } else {\n            selectedVersion = version;\n          }\n        } else {\n          throw new Error(\n            `The dependency being added (\"${packageName}\") is a project in the local Rush repository, ` +\n              `but the version specifier provided (${initialSpec}) does not match the local project's version ` +\n              `(${version}). Correct the version specifier, omit a version specifier, or include \"${packageName}\" as a ` +\n              `cyclicDependencyProject if it is intended for \"${packageName}\" to come from an external feed and not ` +\n              'from the local Rush repository.'\n          );\n        }\n      } else {\n        console.log(`Querying registry for all versions of \"${packageName}\"...`);\n\n        let commandArgs: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          commandArgs = ['info', packageName, 'versions', '--json'];\n        } else {\n          commandArgs = ['view', packageName, 'versions', '--json'];\n        }\n\n        const allVersions: string = Utilities.executeCommandAndCaptureOutput(\n          this._rushConfiguration.packageManagerToolFilename,\n          commandArgs,\n          this._rushConfiguration.commonTempFolder\n        );\n\n        let versionList: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          versionList = JSON.parse(allVersions).data;\n        } else {\n          versionList = JSON.parse(allVersions);\n        }\n\n        console.log(colors.gray(`Found ${versionList.length} available versions.`));\n\n        for (const version of versionList) {\n          if (semver.satisfies(version, initialSpec)) {\n            selectedVersion = initialSpec;\n            console.log(`Found a version that satisfies ${initialSpec}: ${colors.cyan(version)}`);\n            break;\n          }\n        }\n\n        if (!selectedVersion) {\n          throw new Error(\n            `Unable to find a version of \"${packageName}\" that satisfies` +\n              ` the version specifier \"${initialSpec}\"`\n          );\n        }\n      }\n    } else {\n      if (!this._rushConfiguration.ensureConsistentVersions) {\n        console.log(\n          colors.gray(\n            `The \"ensureConsistentVersions\" policy is NOT active, so we will assign the latest version.`\n          )\n        );\n        console.log();\n      }\n\n      if (localProject !== undefined) {\n        // For workspaces, assume that no specified version range means you always want to consume\n        // the local project. Otherwise, use the exact local package version\n        if (useWorkspaces) {\n          selectedVersion = '*';\n          selectedVersionPrefix = workspacePrefix;\n        } else {\n          selectedVersion = localProject.packageJson.version;\n        }\n      } else {\n        console.log(`Querying NPM registry for latest version of \"${packageName}\"...`);\n\n        let commandArgs: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          commandArgs = ['info', packageName, 'dist-tags.latest', '--silent'];\n        } else {\n          commandArgs = ['view', `${packageName}@latest`, 'version'];\n        }\n\n        selectedVersion = Utilities.executeCommandAndCaptureOutput(\n          this._rushConfiguration.packageManagerToolFilename,\n          commandArgs,\n          this._rushConfiguration.commonTempFolder\n        ).trim();\n      }\n\n      console.log();\n\n      console.log(`Found latest version: ${colors.cyan(selectedVersion!)}`);\n    }\n\n    console.log();\n\n    let reasonForModification: string = '';\n    if (selectedVersion !== '*') {\n      switch (rangeStyle) {\n        case SemVerStyle.Caret: {\n          selectedVersionPrefix += '^';\n          reasonForModification = ' because the \"--caret\" flag was specified';\n          break;\n        }\n\n        case SemVerStyle.Exact: {\n          reasonForModification = ' because the \"--exact\" flag was specified';\n          break;\n        }\n\n        case SemVerStyle.Tilde: {\n          selectedVersionPrefix += '~';\n          break;\n        }\n\n        case SemVerStyle.Passthrough: {\n          break;\n        }\n\n        default: {\n          throw new Error(`Unexpected SemVerStyle ${rangeStyle}.`);\n        }\n      }\n    }\n\n    const normalizedVersion: string = selectedVersionPrefix + selectedVersion;\n    console.log(\n      colors.gray(`Assigning version \"${normalizedVersion}\" for \"${packageName}\"${reasonForModification}.`)\n    );\n    return normalizedVersion;\n  }\n\n  private _collectAllDownstreamDependencies(\n    project: RushConfigurationProject\n  ): Set<RushConfigurationProject> {\n    const allProjectDownstreamDependencies: Set<RushConfigurationProject> =\n      new Set<RushConfigurationProject>();\n\n    const collectDependencies: (rushProject: RushConfigurationProject) => void = (\n      rushProject: RushConfigurationProject\n    ) => {\n      for (const downstreamDependencyProject of rushProject.downstreamDependencyProjects) {\n        const foundProject: RushConfigurationProject | undefined =\n          this._rushConfiguration.projectsByName.get(downstreamDependencyProject);\n\n        if (!foundProject) {\n          continue;\n        }\n\n        if (foundProject.cyclicDependencyProjects.has(rushProject.packageName)) {\n          continue;\n        }\n\n        if (!allProjectDownstreamDependencies.has(foundProject)) {\n          allProjectDownstreamDependencies.add(foundProject);\n          collectDependencies(foundProject);\n        }\n      }\n    };\n\n    collectDependencies(project);\n    return allProjectDownstreamDependencies;\n  }\n\n  /**\n   * Given a package name, this function returns a {@see RushConfigurationProject} if the package is a project\n   * in the local Rush repo and is not marked as cyclic for any of the projects.\n   *\n   * @remarks\n   * This function throws an error if adding the discovered local project as a dependency\n   * would create a dependency cycle, or if it would be added to multiple projects.\n   */\n  private _tryGetLocalProject(\n    packageName: string,\n    projects: RushConfigurationProject[]\n  ): RushConfigurationProject | undefined {\n    const foundProject: RushConfigurationProject | undefined =\n      this._rushConfiguration.projectsByName.get(packageName);\n\n    if (foundProject === undefined) {\n      return undefined;\n    }\n\n    if (projects.length > 1) {\n      throw new Error(\n        `\"rush add\" does not support adding a local project as a dependency to multiple projects at once.`\n      );\n    }\n\n    const project: RushConfigurationProject = projects[0];\n\n    if (project.cyclicDependencyProjects.has(foundProject.packageName)) {\n      return undefined;\n    }\n\n    // Are we attempting to add this project to itself?\n    if (project === foundProject) {\n      throw new Error(\n        'Unable to add a project as a dependency of itself unless the dependency is listed as a cyclic dependency ' +\n          `in rush.json. This command attempted to add \"${foundProject.packageName}\" as a dependency of itself.`\n      );\n    }\n\n    // Are we attempting to create a cycle?\n    const downstreamDependencies: Set<RushConfigurationProject> =\n      this._collectAllDownstreamDependencies(project);\n    if (downstreamDependencies.has(foundProject)) {\n      throw new Error(\n        `Adding \"${foundProject.packageName}\" as a direct or indirect dependency of ` +\n          `\"${project.packageName}\" would create a dependency cycle.`\n      );\n    }\n\n    return foundProject;\n  }\n}\n"]}