{"version":3,"file":"ProjectTaskRunner.js","sourceRoot":"","sources":["../../../src/logic/taskExecution/ProjectTaskRunner.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as child_process from 'child_process';\nimport * as path from 'path';\nimport {\n  JsonFile,\n  Text,\n  FileSystem,\n  JsonObject,\n  NewlineKind,\n  InternalError,\n  ITerminal,\n  Terminal,\n  ColorValue\n} from '@rushstack/node-core-library';\nimport {\n  TerminalChunkKind,\n  TextRewriterTransform,\n  StderrLineTransform,\n  SplitterTransform,\n  DiscardStdoutTransform,\n  PrintUtilities\n} from '@rushstack/terminal';\nimport { CollatedTerminal } from '@rushstack/stream-collator';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { Utilities, UNINITIALIZED } from '../../utilities/Utilities';\nimport { TaskStatus } from './TaskStatus';\nimport { TaskError } from './TaskError';\nimport type { ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';\nimport { BaseTaskRunner, ITaskRunnerContext } from './BaseTaskRunner';\nimport { ProjectLogWritable } from './ProjectLogWritable';\nimport { ProjectBuildCache } from '../buildCache/ProjectBuildCache';\nimport type { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\nimport { ICacheOptionsForCommand, RushProjectConfiguration } from '../../api/RushProjectConfiguration';\nimport { CollatedTerminalProvider } from '../../utilities/CollatedTerminalProvider';\nimport type { CommandLineConfiguration, IPhase } from '../../api/CommandLineConfiguration';\nimport { RushConstants } from '../RushConstants';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\n\nexport interface IProjectDeps {\n  files: { [filePath: string]: string };\n  arguments: string;\n}\n\nexport interface IProjectTaskRunnerOptions {\n  rushProject: RushConfigurationProject;\n  rushConfiguration: RushConfiguration;\n  buildCacheConfiguration: BuildCacheConfiguration | undefined;\n  commandToRun: string;\n  isIncrementalBuildAllowed: boolean;\n  projectChangeAnalyzer: ProjectChangeAnalyzer;\n  allowWarningsInSuccessfulBuild?: boolean;\n  taskName: string;\n  phase: IPhase;\n}\n\nfunction _areShallowEqual(object1: JsonObject, object2: JsonObject): boolean {\n  for (const n in object1) {\n    if (!(n in object2) || object1[n] !== object2[n]) {\n      return false;\n    }\n  }\n  for (const n in object2) {\n    if (!(n in object1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * A `BaseTaskRunner` subclass that executes a task for a Rush project and updates its package-deps-hash\n * incremental state.\n */\nexport class ProjectTaskRunner extends BaseTaskRunner {\n  public readonly name: string;\n\n  public readonly isSkipAllowed: boolean;\n  public hadEmptyScript: boolean = false;\n  public readonly warningsAreAllowed: boolean;\n\n  private readonly _rushProject: RushConfigurationProject;\n  private readonly _phase: IPhase;\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _buildCacheConfiguration: BuildCacheConfiguration | undefined;\n  private readonly _commandName: string;\n  private readonly _commandToRun: string;\n  private readonly _isCacheReadAllowed: boolean;\n  private readonly _projectChangeAnalyzer: ProjectChangeAnalyzer;\n  private readonly _packageDepsFilename: string;\n  private readonly _logFilenameIdentifier: string;\n\n  /**\n   * UNINITIALIZED === we haven't tried to initialize yet\n   * undefined === we didn't create one because the feature is not enabled\n   */\n  private _projectBuildCache: ProjectBuildCache | undefined | UNINITIALIZED = UNINITIALIZED;\n\n  public constructor(options: IProjectTaskRunnerOptions) {\n    super();\n    const phase: IPhase = options.phase;\n    this.name = options.taskName;\n    this._rushProject = options.rushProject;\n    this._phase = phase;\n    this._rushConfiguration = options.rushConfiguration;\n    this._buildCacheConfiguration = options.buildCacheConfiguration;\n    this._commandName = phase.name;\n    this._commandToRun = options.commandToRun;\n    this._isCacheReadAllowed = options.isIncrementalBuildAllowed;\n    this.isSkipAllowed = options.isIncrementalBuildAllowed;\n    this._projectChangeAnalyzer = options.projectChangeAnalyzer;\n    this._packageDepsFilename = `package-deps_${phase.logFilenameIdentifier}.json`;\n    this.warningsAreAllowed =\n      EnvironmentConfiguration.allowWarningsInSuccessfulBuild ||\n      options.allowWarningsInSuccessfulBuild ||\n      false;\n    this._logFilenameIdentifier = phase.logFilenameIdentifier;\n  }\n\n  public async executeAsync(context: ITaskRunnerContext): Promise<TaskStatus> {\n    try {\n      if (!this._commandToRun) {\n        this.hadEmptyScript = true;\n      }\n      return await this._executeTaskAsync(context);\n    } catch (error) {\n      throw new TaskError('executing', (error as Error).message);\n    }\n  }\n\n  private async _executeTaskAsync(context: ITaskRunnerContext): Promise<TaskStatus> {\n    // TERMINAL PIPELINE:\n    //\n    //                             +--> quietModeTransform? --> collatedWriter\n    //                             |\n    // normalizeNewlineTransform --1--> stderrLineTransform --2--> removeColorsTransform --> projectLogWritable\n    //                                                        |\n    //                                                        +--> stdioSummarizer\n    const projectLogWritable: ProjectLogWritable = new ProjectLogWritable(\n      this._rushProject,\n      context.collatedWriter.terminal,\n      this._logFilenameIdentifier\n    );\n\n    try {\n      const removeColorsTransform: TextRewriterTransform = new TextRewriterTransform({\n        destination: projectLogWritable,\n        removeColors: true,\n        normalizeNewlines: NewlineKind.OsDefault\n      });\n\n      const splitterTransform2: SplitterTransform = new SplitterTransform({\n        destinations: [removeColorsTransform, context.stdioSummarizer]\n      });\n\n      const stderrLineTransform: StderrLineTransform = new StderrLineTransform({\n        destination: splitterTransform2,\n        newlineKind: NewlineKind.Lf // for StdioSummarizer\n      });\n\n      const discardTransform: DiscardStdoutTransform = new DiscardStdoutTransform({\n        destination: context.collatedWriter\n      });\n\n      const splitterTransform1: SplitterTransform = new SplitterTransform({\n        destinations: [context.quietMode ? discardTransform : context.collatedWriter, stderrLineTransform]\n      });\n\n      const normalizeNewlineTransform: TextRewriterTransform = new TextRewriterTransform({\n        destination: splitterTransform1,\n        normalizeNewlines: NewlineKind.Lf,\n        ensureNewlineAtEnd: true\n      });\n\n      const collatedTerminal: CollatedTerminal = new CollatedTerminal(normalizeNewlineTransform);\n      const terminalProvider: CollatedTerminalProvider = new CollatedTerminalProvider(collatedTerminal, {\n        debugEnabled: context.debugMode\n      });\n      const terminal: Terminal = new Terminal(terminalProvider);\n\n      let hasWarningOrError: boolean = false;\n      const projectFolder: string = this._rushProject.projectFolder;\n      let lastProjectDeps: IProjectDeps | undefined = undefined;\n\n      const currentDepsPath: string = path.join(\n        this._rushProject.projectRushTempFolder,\n        this._packageDepsFilename\n      );\n\n      if (FileSystem.exists(currentDepsPath)) {\n        try {\n          lastProjectDeps = JsonFile.load(currentDepsPath);\n        } catch (e) {\n          // Warn and ignore - treat failing to load the file as the project being not built.\n          terminal.writeWarningLine(\n            `Warning: error parsing ${this._packageDepsFilename}: ${e}. Ignoring and ` +\n              `treating the command \"${this._commandToRun}\" as not run.`\n          );\n        }\n      }\n\n      let projectDeps: IProjectDeps | undefined;\n      let trackedFiles: string[] | undefined;\n      try {\n        const fileHashes: Map<string, string> | undefined =\n          await this._projectChangeAnalyzer._tryGetProjectDependenciesAsync(this._rushProject, terminal);\n\n        if (fileHashes) {\n          const files: { [filePath: string]: string } = {};\n          trackedFiles = [];\n          for (const [filePath, fileHash] of fileHashes) {\n            files[filePath] = fileHash;\n            trackedFiles.push(filePath);\n          }\n\n          projectDeps = {\n            files,\n            arguments: this._commandToRun\n          };\n        } else if (this.isSkipAllowed) {\n          // To test this code path:\n          // Remove the `.git` folder then run \"rush build --verbose\"\n          terminal.writeLine({\n            text: PrintUtilities.wrapWords(\n              'This workspace does not appear to be tracked by Git. ' +\n                'Rush will proceed without incremental execution, caching, and change detection.'\n            ),\n            foregroundColor: ColorValue.Cyan\n          });\n        }\n      } catch (error) {\n        // To test this code path:\n        // Delete a project's \".rush/temp/shrinkwrap-deps.json\" then run \"rush build --verbose\"\n        terminal.writeLine('Unable to calculate incremental state: ' + (error as Error).toString());\n        terminal.writeLine({\n          text: 'Rush will proceed without incremental execution, caching, and change detection.',\n          foregroundColor: ColorValue.Cyan\n        });\n      }\n\n      // If possible, we want to skip this task -- either by restoring it from the\n      // cache, if caching is enabled, or determining that the project\n      // is unchanged (using the older incremental execution logic). These two approaches,\n      // \"caching\" and \"skipping\", are incompatible, so only one applies.\n      //\n      // Note that \"caching\" and \"skipping\" take two different approaches\n      // to tracking dependents:\n      //\n      //   - For caching, \"isCacheReadAllowed\" is set if a project supports\n      //     incremental builds, and determining whether this project or a dependent\n      //     has changed happens inside the hashing logic.\n      //\n      //   - For skipping, \"isSkipAllowed\" is set to true initially, and during\n      //     the process of running dependents, it will be changed by TaskExecutionManager to\n      //     false if a dependency wasn't able to be skipped.\n      //\n      let buildCacheReadAttempted: boolean = false;\n      if (this._isCacheReadAllowed) {\n        const projectBuildCache: ProjectBuildCache | undefined = await this._tryGetProjectBuildCacheAsync(\n          terminal,\n          trackedFiles,\n          context.repoCommandLineConfiguration\n        );\n\n        buildCacheReadAttempted = !!projectBuildCache;\n        const restoreFromCacheSuccess: boolean | undefined =\n          await projectBuildCache?.tryRestoreFromCacheAsync(terminal);\n\n        if (restoreFromCacheSuccess) {\n          return TaskStatus.FromCache;\n        }\n      }\n      if (this.isSkipAllowed && !buildCacheReadAttempted) {\n        const isPackageUnchanged: boolean = !!(\n          lastProjectDeps &&\n          projectDeps &&\n          projectDeps.arguments === lastProjectDeps.arguments &&\n          _areShallowEqual(projectDeps.files, lastProjectDeps.files)\n        );\n\n        if (isPackageUnchanged) {\n          return TaskStatus.Skipped;\n        }\n      }\n\n      // If the deps file exists, remove it before starting execution.\n      FileSystem.deleteFile(currentDepsPath);\n\n      // TODO: Remove legacyDepsPath with the next major release of Rush\n      const legacyDepsPath: string = path.join(this._rushProject.projectFolder, 'package-deps.json');\n      // Delete the legacy package-deps.json\n      FileSystem.deleteFile(legacyDepsPath);\n\n      if (!this._commandToRun) {\n        // Write deps on success.\n        if (projectDeps) {\n          JsonFile.save(projectDeps, currentDepsPath, {\n            ensureFolderExists: true\n          });\n        }\n\n        return TaskStatus.Success;\n      }\n\n      // Run the task\n      terminal.writeLine('Invoking: ' + this._commandToRun);\n\n      const task: child_process.ChildProcess = Utilities.executeLifecycleCommandAsync(this._commandToRun, {\n        rushConfiguration: this._rushConfiguration,\n        workingDirectory: projectFolder,\n        initCwd: this._rushConfiguration.commonTempFolder,\n        handleOutput: true,\n        environmentPathOptions: {\n          includeProjectBin: true\n        }\n      });\n\n      // Hook into events, in order to get live streaming of the log\n      if (task.stdout !== null) {\n        task.stdout.on('data', (data: Buffer) => {\n          const text: string = data.toString();\n          collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stdout });\n        });\n      }\n      if (task.stderr !== null) {\n        task.stderr.on('data', (data: Buffer) => {\n          const text: string = data.toString();\n          collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stderr });\n          hasWarningOrError = true;\n        });\n      }\n\n      let status: TaskStatus = await new Promise(\n        (resolve: (status: TaskStatus) => void, reject: (error: TaskError) => void) => {\n          task.on('close', (code: number) => {\n            try {\n              if (code !== 0) {\n                reject(new TaskError('error', `Returned error code: ${code}`));\n              } else if (hasWarningOrError) {\n                resolve(TaskStatus.SuccessWithWarning);\n              } else {\n                resolve(TaskStatus.Success);\n              }\n            } catch (error) {\n              reject(error as TaskError);\n            }\n          });\n        }\n      );\n\n      const taskIsSuccessful: boolean =\n        status === TaskStatus.Success ||\n        (status === TaskStatus.SuccessWithWarning &&\n          this.warningsAreAllowed &&\n          !!this._rushConfiguration.experimentsConfiguration.configuration\n            .buildCacheWithAllowWarningsInSuccessfulBuild);\n\n      if (taskIsSuccessful && projectDeps) {\n        // Write deps on success.\n        const writeProjectStatePromise: Promise<boolean> = JsonFile.saveAsync(projectDeps, currentDepsPath, {\n          ensureFolderExists: true\n        });\n\n        // If the command is successful and we can calculate project hash, we will write a\n        // new cache entry even if incremental execution is not allowed.\n        const projectBuildCache: ProjectBuildCache | undefined = await this._tryGetProjectBuildCacheAsync(\n          terminal,\n          trackedFiles,\n          context.repoCommandLineConfiguration\n        );\n        const setCacheEntryPromise: Promise<boolean> | undefined =\n          projectBuildCache?.trySetCacheEntryAsync(terminal);\n\n        const [, cacheWriteSuccess] = await Promise.all([writeProjectStatePromise, setCacheEntryPromise]);\n\n        if (terminalProvider.hasErrors) {\n          status = TaskStatus.Failure;\n        } else if (cacheWriteSuccess === false) {\n          status = TaskStatus.SuccessWithWarning;\n        }\n      }\n\n      normalizeNewlineTransform.close();\n\n      // If the pipeline is wired up correctly, then closing normalizeNewlineTransform should\n      // have closed projectLogWritable.\n      if (projectLogWritable.isOpen) {\n        throw new InternalError('The output file handle was not closed');\n      }\n\n      return status;\n    } finally {\n      projectLogWritable.close();\n    }\n  }\n\n  private async _tryGetProjectBuildCacheAsync(\n    terminal: ITerminal,\n    trackedProjectFiles: string[] | undefined,\n    commandLineConfiguration: CommandLineConfiguration\n  ): Promise<ProjectBuildCache | undefined> {\n    if (this._projectBuildCache === UNINITIALIZED) {\n      this._projectBuildCache = undefined;\n\n      if (this._buildCacheConfiguration && this._buildCacheConfiguration.buildCacheEnabled) {\n        const projectConfiguration: RushProjectConfiguration | undefined =\n          await RushProjectConfiguration.tryLoadForProjectAsync(\n            this._rushProject,\n            commandLineConfiguration,\n            terminal\n          );\n        if (projectConfiguration) {\n          if (projectConfiguration.cacheOptions?.disableBuildCache) {\n            terminal.writeVerboseLine('Caching has been disabled for this project.');\n          } else {\n            const commandOptions: ICacheOptionsForCommand | undefined =\n              projectConfiguration.cacheOptions.optionsForCommandsByName.get(this._commandName);\n            if (commandOptions?.disableBuildCache) {\n              terminal.writeVerboseLine(\n                `Caching has been disabled for this project's \"${this._commandName}\" command.`\n              );\n            } else {\n              const projectOutputFolderNames: ReadonlyArray<string> =\n                projectConfiguration.projectOutputFolderNamesForPhases.get(this._phase.name) || [];\n              this._projectBuildCache = await ProjectBuildCache.tryGetProjectBuildCache({\n                projectConfiguration,\n                projectOutputFolderNames,\n                buildCacheConfiguration: this._buildCacheConfiguration,\n                terminal,\n                command: this._commandToRun,\n                trackedProjectFiles: trackedProjectFiles,\n                projectChangeAnalyzer: this._projectChangeAnalyzer,\n                phaseName: this._phase.name\n              });\n            }\n          }\n        } else {\n          terminal.writeVerboseLine(\n            `Project does not have a ${RushConstants.rushProjectConfigFilename} configuration file, ` +\n              'or one provided by a rig, so it does not support caching.'\n          );\n        }\n      }\n    }\n\n    return this._projectBuildCache;\n  }\n}\n\n/**\n * When running a command from the \"scripts\" block in package.json, if the command\n * contains Unix-style path slashes and the OS is Windows, the package managers will\n * convert slashes to backslashes.  This is a complicated undertaking.  For example, they\n * need to convert \"node_modules/bin/this && ./scripts/that --name keep/this\"\n * to \"node_modules\\bin\\this && .\\scripts\\that --name keep/this\", and they don't want to\n * convert ANY of the slashes in \"cmd.exe /c echo a/b\".  NPM and PNPM use npm-lifecycle for this,\n * but it unfortunately has a dependency on the entire node-gyp kitchen sink.  Yarn has a\n * simplified implementation in fix-cmd-win-slashes.js, but it's not exposed as a library.\n *\n * Fundamentally NPM's whole feature seems misguided:  They start by inviting people to write\n * shell scripts that will be executed by wildly different shell languages (e.g. cmd.exe and Bash).\n * It's very tricky for a developer to guess what's safe to do without testing every OS.\n * Even simple path separators are not portable, so NPM added heuristics to figure out which\n * slashes are part of a path or not, and convert them.  These workarounds end up having tons\n * of special cases.  They probably could have implemented their own entire minimal cross-platform\n * shell language with less code and less confusion than npm-lifecycle's approach.\n *\n * We've deprecated shell operators inside package.json.  Instead, we advise people to move their\n * scripts into conventional script files, and put only a file path in package.json.  So, for\n * Rush's workaround here, we really only care about supporting the small set of cases seen in the\n * unit tests.  For anything that doesn't fit those patterns, we leave the string untouched\n * (i.e. err on the side of not breaking anything).  We could revisit this later if someone\n * complains about it, but so far nobody has.  :-)\n */\nexport function convertSlashesForWindows(command: string): string {\n  // The first group will match everything up to the first space, \"&\", \"|\", \"<\", \">\", or quote.\n  // The second group matches the remainder.\n  const commandRegExp: RegExp = /^([^\\s&|<>\"]+)(.*)$/;\n\n  const match: RegExpMatchArray | null = commandRegExp.exec(command);\n  if (match) {\n    // Example input: \"bin/blarg --path ./config/blah.json && a/b\"\n    // commandPart=\"bin/blarg\"\n    // remainder=\" --path ./config/blah.json && a/b\"\n    const commandPart: string = match[1];\n    const remainder: string = match[2];\n\n    // If the command part already contains a backslash, then leave it alone\n    if (commandPart.indexOf('\\\\') < 0) {\n      // Replace all the slashes with backslashes, e.g. to produce:\n      // \"bin\\blarg --path ./config/blah.json && a/b\"\n      //\n      // NOTE: we don't attempt to process the path parameter or stuff after \"&&\"\n      return Text.replaceAll(commandPart, '/', '\\\\') + remainder;\n    }\n  }\n\n  // Don't change anything\n  return command;\n}\n"]}