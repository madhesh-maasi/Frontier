{"version":3,"file":"BaseTaskRunner.js","sourceRoot":"","sources":["../../../src/logic/taskExecution/BaseTaskRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAgB3D;;;;GAIG;AACH,MAAsB,cAAc;CA2BnC;AA3BD,wCA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { StdioSummarizer } from '@rushstack/terminal';\nimport type { CollatedWriter } from '@rushstack/stream-collator';\n\nimport type { TaskStatus } from './TaskStatus';\nimport type { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\n\nexport interface ITaskRunnerContext {\n  repoCommandLineConfiguration: CommandLineConfiguration;\n  collatedWriter: CollatedWriter;\n  stdioSummarizer: StdioSummarizer;\n  quietMode: boolean;\n  debugMode: boolean;\n}\n\n/**\n * The `Task` class is a node in the dependency graph of work that needs to be scheduled by the\n * `TaskExecutionManager`. Each `Task` has a `runner` member of type `BaseTaskRunner`, whose subclass\n * manages the actual operations for running a single task.\n */\nexport abstract class BaseTaskRunner {\n  /**\n   * Name of the task definition.\n   */\n  public abstract readonly name: string;\n\n  /**\n   * This flag determines if the task is allowed to be skipped if up to date.\n   */\n  public abstract isSkipAllowed: boolean;\n\n  /**\n   * Assigned by execute().  True if the script was an empty string.  Operationally an empty string is\n   * like a shell command that succeeds instantly, but e.g. it would be odd to report time statistics for it.\n   */\n  public abstract hadEmptyScript: boolean;\n\n  /**\n   * If set to true, a warning result should not make Rush exit with a nonzero\n   * exit code\n   */\n  public abstract warningsAreAllowed: boolean;\n\n  /**\n   * Method to be executed for the task.\n   */\n  public abstract executeAsync(context: ITaskRunnerContext): Promise<TaskStatus>;\n}\n"]}