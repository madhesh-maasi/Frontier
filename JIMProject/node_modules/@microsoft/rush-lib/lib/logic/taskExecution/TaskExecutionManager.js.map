{"version":3,"file":"TaskExecutionManager.js","sourceRoot":"","sources":["../../../src/logic/taskExecution/TaskExecutionManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport colors from 'colors/safe';\nimport {\n  StdioSummarizer,\n  TerminalWritable,\n  StdioWritable,\n  TerminalChunkKind,\n  TextRewriterTransform\n} from '@rushstack/terminal';\nimport { StreamCollator, CollatedTerminal, CollatedWriter } from '@rushstack/stream-collator';\nimport { AlreadyReportedError, NewlineKind, InternalError, Sort } from '@rushstack/node-core-library';\n\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { Task } from './Task';\nimport { TaskStatus } from './TaskStatus';\nimport { ITaskRunnerContext } from './BaseTaskRunner';\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\nimport { TaskError } from './TaskError';\n\nexport interface ITaskExecutionManagerOptions {\n  quietMode: boolean;\n  debugMode: boolean;\n  parallelism: string | undefined;\n  changedProjectsOnly: boolean;\n  repoCommandLineConfiguration: CommandLineConfiguration;\n  destination?: TerminalWritable;\n}\n\n/**\n * Format \"======\" lines for a shell window with classic 80 columns\n */\nconst ASCII_HEADER_WIDTH: number = 79;\n\n/**\n * A class which manages the execution of a set of tasks with interdependencies.\n * Initially, and at the end of each task execution, all unblocked tasks\n * are added to a ready queue which is then executed. This is done continually until all\n * tasks are complete, or prematurely fails if any of the tasks fail.\n */\nexport class TaskExecutionManager {\n  private readonly _tasks: Task[];\n  private readonly _changedProjectsOnly: boolean;\n  private readonly _taskQueue: Task[];\n  private readonly _quietMode: boolean;\n  private readonly _debugMode: boolean;\n  private readonly _parallelism: number;\n  private readonly _repoCommandLineConfiguration: CommandLineConfiguration;\n  private _hasAnyFailures: boolean;\n  private _hasAnyNonAllowedWarnings: boolean;\n  private _currentActiveTasks!: number;\n  private _totalTasks!: number;\n  private _completedTasks!: number;\n\n  private readonly _outputWritable: TerminalWritable;\n  private readonly _colorsNewlinesTransform: TextRewriterTransform;\n  private readonly _streamCollator: StreamCollator;\n\n  private _terminal: CollatedTerminal;\n\n  public constructor(orderedTasks: Task[], options: ITaskExecutionManagerOptions) {\n    const { quietMode, debugMode, parallelism, changedProjectsOnly, repoCommandLineConfiguration } = options;\n    this._tasks = orderedTasks;\n    this._taskQueue = [...orderedTasks]; // Clone the task array\n    this._quietMode = quietMode;\n    this._debugMode = debugMode;\n    this._hasAnyFailures = false;\n    this._hasAnyNonAllowedWarnings = false;\n    this._changedProjectsOnly = changedProjectsOnly;\n    this._repoCommandLineConfiguration = repoCommandLineConfiguration;\n\n    // TERMINAL PIPELINE:\n    //\n    // streamCollator --> colorsNewlinesTransform --> StdioWritable\n    //\n    this._outputWritable = options.destination ? options.destination : StdioWritable.instance;\n    this._colorsNewlinesTransform = new TextRewriterTransform({\n      destination: this._outputWritable,\n      normalizeNewlines: NewlineKind.OsDefault,\n      removeColors: !colors.enabled\n    });\n    this._streamCollator = new StreamCollator({\n      destination: this._colorsNewlinesTransform,\n      onWriterActive: this._streamCollator_onWriterActive\n    });\n    this._terminal = this._streamCollator.terminal;\n\n    const numberOfCores: number = os.cpus().length;\n\n    if (parallelism) {\n      if (parallelism === 'max') {\n        this._parallelism = numberOfCores;\n      } else {\n        const parallelismInt: number = parseInt(parallelism, 10);\n\n        if (isNaN(parallelismInt)) {\n          throw new Error(`Invalid parallelism value of '${parallelism}', expected a number or 'max'`);\n        }\n\n        this._parallelism = parallelismInt;\n      }\n    } else {\n      // If an explicit parallelism number wasn't provided, then choose a sensible\n      // default.\n      if (os.platform() === 'win32') {\n        // On desktop Windows, some people have complained that their system becomes\n        // sluggish if Rush is using all the CPU cores.  Leave one thread for\n        // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\n        this._parallelism = Math.max(numberOfCores - 1, 1);\n      } else {\n        // Unix-like operating systems have more balanced scheduling, so default\n        // to the number of CPU cores\n        this._parallelism = numberOfCores;\n      }\n    }\n  }\n\n  private _streamCollator_onWriterActive = (writer: CollatedWriter | undefined): void => {\n    if (writer) {\n      this._completedTasks++;\n\n      // Format a header like this\n      //\n      // ==[ @rushstack/the-long-thing ]=================[ 1 of 1000 ]==\n\n      // leftPart: \"==[ @rushstack/the-long-thing \"\n      const leftPart: string = colors.gray('==[') + ' ' + colors.cyan(writer.taskName) + ' ';\n      const leftPartLength: number = 4 + writer.taskName.length + 1;\n\n      // rightPart: \" 1 of 1000 ]==\"\n      const completedOfTotal: string = `${this._completedTasks} of ${this._totalTasks}`;\n      const rightPart: string = ' ' + colors.white(completedOfTotal) + ' ' + colors.gray(']==');\n      const rightPartLength: number = 1 + completedOfTotal.length + 4;\n\n      // middlePart: \"]=================[\"\n      const twoBracketsLength: number = 2;\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\n        ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\n        0\n      );\n\n      const middlePart: string = colors.gray(']' + '='.repeat(middlePartLengthMinusTwoBrackets) + '[');\n\n      this._terminal.writeStdoutLine('\\n' + leftPart + middlePart + rightPart);\n\n      if (!this._quietMode) {\n        this._terminal.writeStdoutLine('');\n      }\n    }\n  };\n\n  /**\n   * Executes all tasks which have been registered, returning a promise which is resolved when all the\n   * tasks are completed successfully, or rejects when any task fails.\n   */\n  public async executeAsync(): Promise<void> {\n    this._currentActiveTasks = 0;\n    this._completedTasks = 0;\n    this._totalTasks = this._tasks.length;\n\n    if (!this._quietMode) {\n      const plural: string = this._tasks.length === 1 ? '' : 's';\n      this._terminal.writeStdoutLine(`Selected ${this._tasks.length} project${plural}:`);\n      this._terminal.writeStdoutLine(\n        this._tasks\n          .map((x) => `  ${x.name}`)\n          .sort()\n          .join('\\n')\n      );\n      this._terminal.writeStdoutLine('');\n    }\n\n    this._terminal.writeStdoutLine(`Executing a maximum of ${this._parallelism} simultaneous processes...`);\n\n    await this._startAvailableTasksAsync();\n\n    this._printTaskStatus();\n\n    if (this._hasAnyFailures) {\n      this._terminal.writeStderrLine(colors.red('Projects failed to build.') + '\\n');\n      throw new AlreadyReportedError();\n    } else if (this._hasAnyNonAllowedWarnings) {\n      this._terminal.writeStderrLine(colors.yellow('Projects succeeded with warnings.') + '\\n');\n      throw new AlreadyReportedError();\n    }\n  }\n\n  /**\n   * Pulls the next task with no dependencies off the task queue\n   * Removes any non-ready tasks from the task queue (this should only be blocked tasks)\n   */\n  private _getNextTask(): Task | undefined {\n    for (let i: number = 0; i < this._taskQueue.length; i++) {\n      const task: Task = this._taskQueue[i];\n\n      if (task.status !== TaskStatus.Ready) {\n        // It shouldn't be on the queue, remove it\n        this._taskQueue.splice(i, 1);\n        // Decrement since we modified the array\n        i--;\n      } else if (task.dependencies.size === 0 && task.status === TaskStatus.Ready) {\n        // this is a task which is ready to go. remove it and return it\n        return this._taskQueue.splice(i, 1)[0];\n      }\n      // Otherwise task is still waiting\n    }\n    return undefined; // There are no tasks ready to go at this time\n  }\n\n  /**\n   * Helper function which finds any tasks which are available to run and begins executing them.\n   * It calls the complete callback when all tasks are completed, or rejects if any task fails.\n   */\n  private async _startAvailableTasksAsync(): Promise<void> {\n    const taskPromises: Promise<void>[] = [];\n    let currentTask: Task | undefined;\n    while (this._currentActiveTasks < this._parallelism && (currentTask = this._getNextTask())) {\n      this._currentActiveTasks++;\n      const task: Task = currentTask;\n      task.status = TaskStatus.Executing;\n\n      task.stopwatch = Stopwatch.start();\n      task.collatedWriter = this._streamCollator.registerTask(task.name);\n      task.stdioSummarizer = new StdioSummarizer();\n\n      taskPromises.push(this._executeTaskAndChainAsync(task));\n    }\n\n    await Promise.all(taskPromises);\n  }\n\n  private async _executeTaskAndChainAsync(task: Task): Promise<void> {\n    const context: ITaskRunnerContext = {\n      repoCommandLineConfiguration: this._repoCommandLineConfiguration,\n      stdioSummarizer: task.stdioSummarizer,\n      collatedWriter: task.collatedWriter,\n      quietMode: this._quietMode,\n      debugMode: this._debugMode\n    };\n\n    try {\n      const result: TaskStatus = await task.runner.executeAsync(context);\n\n      task.stopwatch.stop();\n      task.stdioSummarizer.close();\n\n      this._currentActiveTasks--;\n      switch (result) {\n        case TaskStatus.Success:\n          this._markTaskAsSuccess(task);\n          break;\n        case TaskStatus.SuccessWithWarning:\n          this._hasAnyNonAllowedWarnings = this._hasAnyNonAllowedWarnings || !task.runner.warningsAreAllowed;\n          this._markTaskAsSuccessWithWarning(task);\n          break;\n        case TaskStatus.FromCache:\n          this._markTaskAsFromCache(task);\n          break;\n        case TaskStatus.Skipped:\n          this._markTaskAsSkipped(task);\n          break;\n        case TaskStatus.Failure:\n          this._hasAnyFailures = true;\n          this._markTaskAsFailed(task);\n          break;\n      }\n    } catch (error) {\n      task.stdioSummarizer.close();\n\n      this._currentActiveTasks--;\n\n      this._hasAnyFailures = true;\n\n      // eslint-disable-next-line require-atomic-updates\n      task.error = error as TaskError;\n\n      this._markTaskAsFailed(task);\n    }\n\n    task.collatedWriter.close();\n\n    await this._startAvailableTasksAsync();\n  }\n\n  /**\n   * Marks a task as having failed and marks each of its dependents as blocked\n   */\n  private _markTaskAsFailed(task: Task): void {\n    if (task.error) {\n      task.collatedWriter.terminal.writeStderrLine(task.error.message);\n    }\n    task.collatedWriter.terminal.writeStderrLine(colors.red(`\"${task.name}\" failed to build.`));\n    task.status = TaskStatus.Failure;\n    task.dependents.forEach((dependent: Task) => {\n      this._markTaskAsBlocked(dependent, task);\n    });\n  }\n\n  /**\n   * Marks a task and all its dependents as blocked\n   */\n  private _markTaskAsBlocked(blockedTask: Task, failedTask: Task): void {\n    if (blockedTask.status === TaskStatus.Ready) {\n      this._completedTasks++;\n\n      // Note: We cannot write to task.collatedWriter because \"blockedTask\" will be skipped\n      failedTask.collatedWriter.terminal.writeStdoutLine(\n        `\"${blockedTask.name}\" is blocked by \"${failedTask.name}\".`\n      );\n      blockedTask.status = TaskStatus.Blocked;\n      blockedTask.dependents.forEach((dependent: Task) => {\n        this._markTaskAsBlocked(dependent, failedTask);\n      });\n    }\n  }\n\n  /**\n   * Marks a task as being completed, and removes it from the dependencies list of all its dependents\n   */\n  private _markTaskAsSuccess(task: Task): void {\n    if (task.runner.hadEmptyScript) {\n      task.collatedWriter.terminal.writeStdoutLine(colors.green(`\"${task.name}\" had an empty script.`));\n    } else {\n      task.collatedWriter.terminal.writeStdoutLine(\n        colors.green(`\"${task.name}\" completed successfully in ${task.stopwatch.toString()}.`)\n      );\n    }\n    task.status = TaskStatus.Success;\n\n    task.dependents.forEach((dependent: Task) => {\n      if (!this._changedProjectsOnly) {\n        dependent.runner.isSkipAllowed = false;\n      }\n      dependent.dependencies.delete(task);\n    });\n  }\n\n  /**\n   * Marks a task as being completed, but with warnings written to stderr, and removes it from the dependencies\n   * list of all its dependents\n   */\n  private _markTaskAsSuccessWithWarning(task: Task): void {\n    task.collatedWriter.terminal.writeStderrLine(\n      colors.yellow(`\"${task.name}\" completed with warnings in ${task.stopwatch.toString()}.`)\n    );\n    task.status = TaskStatus.SuccessWithWarning;\n    task.dependents.forEach((dependent: Task) => {\n      if (!this._changedProjectsOnly) {\n        dependent.runner.isSkipAllowed = false;\n      }\n      dependent.dependencies.delete(task);\n    });\n  }\n\n  /**\n   * Marks a task as skipped.\n   */\n  private _markTaskAsSkipped(task: Task): void {\n    task.collatedWriter.terminal.writeStdoutLine(colors.green(`${task.name} was skipped.`));\n    task.status = TaskStatus.Skipped;\n    task.dependents.forEach((dependent: Task) => {\n      dependent.dependencies.delete(task);\n    });\n  }\n\n  /**\n   * Marks a task as provided by cache.\n   */\n  private _markTaskAsFromCache(task: Task): void {\n    task.collatedWriter.terminal.writeStdoutLine(\n      colors.green(`${task.name} was restored from the build cache.`)\n    );\n    task.status = TaskStatus.FromCache;\n    task.dependents.forEach((dependent: Task) => {\n      dependent.dependencies.delete(task);\n    });\n  }\n\n  /**\n   * Prints out a report of the status of each project\n   */\n  private _printTaskStatus(): void {\n    const tasksByStatus: { [status: string]: Task[] } = {};\n    for (const task of this._tasks) {\n      switch (task.status) {\n        // These are the sections that we will report below\n        case TaskStatus.Skipped:\n        case TaskStatus.FromCache:\n        case TaskStatus.Success:\n        case TaskStatus.SuccessWithWarning:\n        case TaskStatus.Blocked:\n        case TaskStatus.Failure:\n          break;\n        default:\n          // This should never happen\n          throw new InternalError('Unexpected task status: ' + task.status);\n      }\n\n      if (tasksByStatus[task.status]) {\n        tasksByStatus[task.status].push(task);\n      } else {\n        tasksByStatus[task.status] = [task];\n      }\n    }\n\n    // Skip a few lines before we start the summary\n    this._terminal.writeStdoutLine('');\n    this._terminal.writeStdoutLine('');\n    this._terminal.writeStdoutLine('');\n\n    // These are ordered so that the most interesting statuses appear last:\n    this._writeCondensedSummary(\n      TaskStatus.Skipped,\n      tasksByStatus,\n      colors.green,\n      'These projects were already up to date:'\n    );\n\n    this._writeCondensedSummary(\n      TaskStatus.FromCache,\n      tasksByStatus,\n      colors.green,\n      'These projects were restored from the build cache:'\n    );\n\n    this._writeCondensedSummary(\n      TaskStatus.Success,\n      tasksByStatus,\n      colors.green,\n      'These projects completed successfully:'\n    );\n\n    this._writeDetailedSummary(TaskStatus.SuccessWithWarning, tasksByStatus, colors.yellow, 'WARNING');\n\n    this._writeCondensedSummary(\n      TaskStatus.Blocked,\n      tasksByStatus,\n      colors.white,\n      'These projects were blocked by dependencies that failed:'\n    );\n\n    this._writeDetailedSummary(TaskStatus.Failure, tasksByStatus, colors.red);\n\n    this._terminal.writeStdoutLine('');\n  }\n\n  private _writeCondensedSummary(\n    status: TaskStatus,\n    tasksByStatus: { [status: string]: Task[] },\n    headingColor: (text: string) => string,\n    preamble: string\n  ): void {\n    // Example:\n    //\n    // ==[ BLOCKED: 4 projects ]==============================================================\n    //\n    // These projects were blocked by dependencies that failed:\n    //   @scope/name\n    //   e\n    //   k\n\n    const tasks: Task[] | undefined = tasksByStatus[status];\n    if (!tasks || tasks.length === 0) {\n      return;\n    }\n    Sort.sortBy(tasks, (x) => x.name);\n\n    this._writeSummaryHeader(status, tasks, headingColor);\n    this._terminal.writeStdoutLine(preamble);\n\n    const longestTaskName: number = Math.max(...tasks.map((x) => x.name.length));\n\n    for (const task of tasks) {\n      if (task.stopwatch && !task.runner.hadEmptyScript && task.status !== TaskStatus.Skipped) {\n        const time: string = task.stopwatch.toString();\n        const padding: string = ' '.repeat(longestTaskName - task.name.length);\n        this._terminal.writeStdoutLine(`  ${task.name}${padding}    ${time}`);\n      } else {\n        this._terminal.writeStdoutLine(`  ${task.name}`);\n      }\n    }\n    this._terminal.writeStdoutLine('');\n  }\n\n  private _writeDetailedSummary(\n    status: TaskStatus,\n    tasksByStatus: { [status: string]: Task[] },\n    headingColor: (text: string) => string,\n    shortStatusName?: string\n  ): void {\n    // Example:\n    //\n    // ==[ SUCCESS WITH WARNINGS: 2 projects ]================================\n    //\n    // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n    //\n    // [eslint] Warning: src/logic/taskExecution/TaskExecutionManager.ts:393:3 ...\n\n    const tasks: Task[] | undefined = tasksByStatus[status];\n    if (!tasks || tasks.length === 0) {\n      return;\n    }\n\n    this._writeSummaryHeader(status, tasks, headingColor);\n\n    if (shortStatusName === undefined) {\n      shortStatusName = status;\n    }\n\n    for (const task of tasks) {\n      // Format a header like this\n      //\n      // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n\n      // leftPart: \"--[ WARNINGS: f \"\n      const subheadingText: string = `${shortStatusName}: ${task.name}`;\n\n      const leftPart: string = colors.gray('--[') + ' ' + headingColor(subheadingText) + ' ';\n      const leftPartLength: number = 4 + subheadingText.length + 1;\n\n      // rightPart: \" 5.07 seconds ]--\"\n      const time: string = task.stopwatch.toString();\n      const rightPart: string = ' ' + colors.white(time) + ' ' + colors.gray(']--');\n      const rightPartLength: number = 1 + time.length + 1 + 3;\n\n      // middlePart: \"]----------------------[\"\n      const twoBracketsLength: number = 2;\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\n        ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\n        0\n      );\n\n      const middlePart: string = colors.gray(']' + '-'.repeat(middlePartLengthMinusTwoBrackets) + '[');\n\n      this._terminal.writeStdoutLine(leftPart + middlePart + rightPart + '\\n');\n\n      const details: string = task.stdioSummarizer.getReport();\n      if (details) {\n        // Don't write a newline, because the report will always end with a newline\n        this._terminal.writeChunk({ text: details, kind: TerminalChunkKind.Stdout });\n      }\n\n      this._terminal.writeStdoutLine('');\n    }\n  }\n\n  private _writeSummaryHeader(\n    status: TaskStatus,\n    tasks: Task[],\n    headingColor: (text: string) => string\n  ): void {\n    // Format a header like this\n    //\n    // ==[ FAILED: 2 projects ]================================================\n\n    // \"2 projects\"\n    const projectsText: string = tasks.length.toString() + (tasks.length === 1 ? ' project' : ' projects');\n    const headingText: string = `${status}: ${projectsText}`;\n\n    // leftPart: \"==[ FAILED: 2 projects \"\n    const leftPart: string = colors.gray('==[') + ' ' + headingColor(headingText) + ' ';\n    const leftPartLength: number = 3 + 1 + headingText.length + 1;\n\n    const rightPartLengthMinusBracket: number = Math.max(ASCII_HEADER_WIDTH - (leftPartLength + 1), 0);\n\n    // rightPart: \"]======================\"\n    const rightPart: string = colors.gray(']' + '='.repeat(rightPartLengthMinusBracket));\n\n    this._terminal.writeStdoutLine(leftPart + rightPart);\n    this._terminal.writeStdoutLine('');\n  }\n}\n"]}