{"version":3,"file":"TaskCollection.js","sourceRoot":"","sources":["../../../src/logic/taskExecution/TaskCollection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Sort } from '@rushstack/node-core-library';\n\nimport { Task } from './Task';\nimport { TaskStatus } from './TaskStatus';\nimport { BaseTaskRunner } from './BaseTaskRunner';\n\n/**\n * This class represents a set of tasks with interdependencies.  Any class of task definition\n * may be registered, and dependencies between tasks are easily specified. There is a check for\n * cyclic dependencies and tasks are ordered based on critical path.\n */\nexport class TaskCollection {\n  private _tasks: Map<string, Task>;\n\n  public constructor() {\n    this._tasks = new Map<string, Task>();\n  }\n\n  /**\n   * Registers a task definition to the map of defined tasks\n   */\n  public addTask(taskRunner: BaseTaskRunner): void {\n    if (this._tasks.has(taskRunner.name)) {\n      throw new Error('A task with that name has already been registered.');\n    }\n\n    const task: Task = new Task(taskRunner, TaskStatus.Ready);\n    task.criticalPathLength = undefined;\n    this._tasks.set(task.name, task);\n  }\n\n  /**\n   * Returns true if a task with that name has been registered\n   */\n  public hasTask(taskName: string): boolean {\n    return this._tasks.has(taskName);\n  }\n\n  /**\n   * Defines the list of dependencies for an individual task.\n   * @param taskName - the string name of the task for which we are defining dependencies. A task with this\n   * name must already have been registered.\n   */\n  public addDependencies(taskName: string, taskDependencies: Iterable<string>): void {\n    const task: Task | undefined = this._tasks.get(taskName);\n\n    if (!task) {\n      throw new Error(`The task '${taskName}' has not been registered`);\n    }\n    if (!taskDependencies) {\n      throw new Error('The list of dependencies must be defined');\n    }\n\n    for (const dependencyName of taskDependencies) {\n      if (!this._tasks.has(dependencyName)) {\n        throw new Error(`The project '${dependencyName}' has not been registered.`);\n      }\n      const dependency: Task = this._tasks.get(dependencyName)!;\n      task.dependencies.add(dependency);\n      dependency.dependents.add(task);\n    }\n  }\n\n  /**\n   * Returns the tasks registered with the collection ordered by the critical path.\n   * It also makes sure there are no cyclic dependencies in the tasks.\n   */\n  public getOrderedTasks(): Task[] {\n    this._checkForCyclicDependencies(this._tasks.values(), [], new Set<string>());\n\n    // Precalculate the number of dependent packages\n    this._tasks.forEach((task: Task) => {\n      this._calculateCriticalPaths(task);\n    });\n\n    // Add everything to the queue\n    const queue: Task[] = [...this._tasks.values()];\n\n    // Sort the queue in descending order, nothing will mess with the order\n    Sort.sortBy(queue, (task: Task): number => -task.criticalPathLength!);\n\n    return queue;\n  }\n\n  /**\n   * Checks for projects that indirectly depend on themselves.\n   */\n  private _checkForCyclicDependencies(\n    tasks: Iterable<Task>,\n    dependencyChain: string[],\n    alreadyCheckedProjects: Set<string>\n  ): void {\n    for (const task of tasks) {\n      if (dependencyChain.indexOf(task.name) >= 0) {\n        throw new Error(\n          'A cyclic dependency was encountered:\\n' +\n            '  ' +\n            [...dependencyChain, task.name].reverse().join('\\n  -> ') +\n            '\\nConsider using the cyclicDependencyProjects option for rush.json.'\n        );\n      }\n\n      if (!alreadyCheckedProjects.has(task.name)) {\n        alreadyCheckedProjects.add(task.name);\n        dependencyChain.push(task.name);\n        this._checkForCyclicDependencies(task.dependents, dependencyChain, alreadyCheckedProjects);\n        dependencyChain.pop();\n      }\n    }\n  }\n\n  /**\n   * Calculate the number of packages which must be built before we reach\n   * the furthest away \"root\" node\n   */\n  private _calculateCriticalPaths(task: Task): number {\n    // Return the memoized value\n    if (task.criticalPathLength !== undefined) {\n      return task.criticalPathLength;\n    }\n\n    // If no dependents, we are in a \"root\"\n    if (task.dependents.size === 0) {\n      task.criticalPathLength = 0;\n      return task.criticalPathLength;\n    } else {\n      // Otherwise we are as long as the longest package + 1\n      const depsLengths: number[] = [];\n      task.dependents.forEach((dep) => depsLengths.push(this._calculateCriticalPaths(dep)));\n      task.criticalPathLength = Math.max(...depsLengths) + 1;\n      return task.criticalPathLength;\n    }\n  }\n}\n"]}