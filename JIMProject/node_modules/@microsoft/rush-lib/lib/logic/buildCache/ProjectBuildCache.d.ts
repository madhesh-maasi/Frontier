import { ITerminal } from '@rushstack/node-core-library';
import { ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';
import { RushProjectConfiguration } from '../../api/RushProjectConfiguration';
import { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';
export interface IProjectBuildCacheOptions {
    buildCacheConfiguration: BuildCacheConfiguration;
    projectConfiguration: RushProjectConfiguration;
    projectOutputFolderNames: ReadonlyArray<string>;
    command: string;
    trackedProjectFiles: string[] | undefined;
    projectChangeAnalyzer: ProjectChangeAnalyzer;
    terminal: ITerminal;
    phaseName: string;
}
export declare class ProjectBuildCache {
    /**
     * null === we haven't tried to initialize yet
     * undefined === unable to initialize
     */
    private static _tarUtility;
    private readonly _project;
    private readonly _localBuildCacheProvider;
    private readonly _cloudBuildCacheProvider;
    private readonly _buildCacheEnabled;
    private readonly _projectOutputFolderNames;
    private _cacheId;
    private constructor();
    private static _tryGetTarUtility;
    static tryGetProjectBuildCache(options: IProjectBuildCacheOptions): Promise<ProjectBuildCache | undefined>;
    private static _validateProject;
    tryRestoreFromCacheAsync(terminal: ITerminal): Promise<boolean>;
    trySetCacheEntryAsync(terminal: ITerminal): Promise<boolean>;
    private _tryCollectPathsToCacheAsync;
    private _getPathsInFolder;
    private _getTarLogFilePath;
    private static _getCacheId;
}
//# sourceMappingURL=ProjectBuildCache.d.ts.map