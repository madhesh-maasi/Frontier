{"version":3,"file":"ChangeManager.js","sourceRoot":"","sources":["../../src/logic/ChangeManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAS3D,yDAAuE;AACvE,+CAA4C;AAC5C,uDAAoD;AACpD,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,aAAa;IASxB,YACE,iBAAoC,EACpC,yBAAmD;QAEnD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACI,IAAI,CACT,WAAmB,EACnB,kBAAmC,IAAI,iCAAe,EAAE,EACxD,uBAAgC,KAAK;QAErC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC;QAE3D,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,IAAI,CAAC,YAAY,GAAG,IAAI,yBAAW,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,mCAAgB,CAAC,kBAAkB,CACpD,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,YAAY,EACjB,oBAAoB,EACpB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,0BAA0B,CAChC,CAAC;QACF,IAAI,CAAC,eAAe,GAAG,mCAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/E,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;IACjE,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,eAAe,CAAC,aAAyC;QAC9D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAC3C,MAAM,WAAW,GAAyC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACxG,IAAI,WAAW,EAAE;gBACf,IAAI,WAAW,CAAC,aAAa,EAAE;oBAC7B,MAAM,UAAU,GAAgB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBACtD,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAW,EAAE,GAAG,CAAC,CAAC;iBACjE;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,YAAqB;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,OAAO;SACR;QAED,2CAA2C;QAC3C,MAAM,eAAe,GAA8B,mCAAgB,CAAC,cAAc,CAChF,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,EACZ,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,0BAA0B,CAChC,CAAC;QAEF,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,eAAe,CAAC,YAAqB;QAC1C,qEAAqE;QACrE,sCAAsC;QACtC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;YACnC,qBAAqB;YACrB,MAAM,iBAAiB,GAAiB,uCAAkB,CAAC,gBAAgB,CACzE,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,CACb,CAAC;YAEF,6DAA6D;YAC7D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;SAC9D;IACH,CAAC;CACF;AA3GD,sCA2GC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { IPackageJson } from '@rushstack/node-core-library';\n\nimport { IChangeInfo } from '../api/ChangeManagement';\nimport { IChangelog } from '../api/Changelog';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { VersionPolicyConfiguration } from '../api/VersionPolicyConfiguration';\nimport { PublishUtilities, IChangeInfoHash } from './PublishUtilities';\nimport { ChangeFiles } from './ChangeFiles';\nimport { PrereleaseToken } from './PrereleaseToken';\nimport { ChangelogGenerator } from './ChangelogGenerator';\n\n/**\n * The class manages change files and controls how changes logged by change files\n * can be applied to package.json and change logs.\n */\nexport class ChangeManager {\n  private _prereleaseToken!: PrereleaseToken;\n  private _orderedChanges!: IChangeInfo[];\n  private _allPackages!: Map<string, RushConfigurationProject>;\n  private _allChanges!: IChangeInfoHash;\n  private _changeFiles!: ChangeFiles;\n  private _rushConfiguration: RushConfiguration;\n  private _lockStepProjectsToExclude: Set<string> | undefined;\n\n  public constructor(\n    rushConfiguration: RushConfiguration,\n    lockStepProjectsToExclude?: Set<string> | undefined\n  ) {\n    this._rushConfiguration = rushConfiguration;\n    this._lockStepProjectsToExclude = lockStepProjectsToExclude;\n  }\n\n  /**\n   * Load changes from change files\n   * @param changesPath - location of change files\n   * @param prereleaseToken - prerelease token\n   * @param includeCommitDetails - whether commit details need to be included in changes\n   */\n  public load(\n    changesPath: string,\n    prereleaseToken: PrereleaseToken = new PrereleaseToken(),\n    includeCommitDetails: boolean = false\n  ): void {\n    this._allPackages = this._rushConfiguration.projectsByName;\n\n    this._prereleaseToken = prereleaseToken;\n\n    this._changeFiles = new ChangeFiles(changesPath);\n    this._allChanges = PublishUtilities.findChangeRequests(\n      this._allPackages,\n      this._rushConfiguration,\n      this._changeFiles,\n      includeCommitDetails,\n      this._prereleaseToken,\n      this._lockStepProjectsToExclude\n    );\n    this._orderedChanges = PublishUtilities.sortChangeRequests(this._allChanges);\n  }\n\n  public hasChanges(): boolean {\n    return this._orderedChanges && this._orderedChanges.length > 0;\n  }\n\n  public get changes(): IChangeInfo[] {\n    return this._orderedChanges;\n  }\n\n  public get allPackages(): Map<string, RushConfigurationProject> {\n    return this._allPackages;\n  }\n\n  public validateChanges(versionConfig: VersionPolicyConfiguration): void {\n    Object.keys(this._allChanges).filter((key) => {\n      const projectInfo: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(key);\n      if (projectInfo) {\n        if (projectInfo.versionPolicy) {\n          const changeInfo: IChangeInfo = this._allChanges[key];\n          projectInfo.versionPolicy.validate(changeInfo.newVersion!, key);\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply changes to package.json\n   * @param shouldCommit - If the value is true, package.json will be updated.\n   * If the value is false, package.json and change logs will not be updated. It will only do a dry-run.\n   */\n  public apply(shouldCommit: boolean): Map<string, IPackageJson> | undefined {\n    if (!this.hasChanges()) {\n      return;\n    }\n\n    // Apply all changes to package.json files.\n    const updatedPackages: Map<string, IPackageJson> = PublishUtilities.updatePackages(\n      this._allChanges,\n      this._allPackages,\n      this._rushConfiguration,\n      shouldCommit,\n      this._prereleaseToken,\n      this._lockStepProjectsToExclude\n    );\n\n    return updatedPackages;\n  }\n\n  public updateChangelog(shouldCommit: boolean): void {\n    // Do not update changelog or delete the change files for prerelease.\n    // Save them for the official release.\n    if (!this._prereleaseToken.hasValue) {\n      // Update changelogs.\n      const updatedChangelogs: IChangelog[] = ChangelogGenerator.updateChangelogs(\n        this._allChanges,\n        this._allPackages,\n        this._rushConfiguration,\n        shouldCommit\n      );\n\n      // Remove the change request files only if \"-a\" was provided.\n      this._changeFiles.deleteAll(shouldCommit, updatedChangelogs);\n    }\n  }\n}\n"]}