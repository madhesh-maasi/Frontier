{"version":3,"file":"KeyboardLoop.js","sourceRoot":"","sources":["../../../src/logic/setup/KeyboardLoop.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as readline from 'readline';\nimport * as process from 'process';\nimport { InternalError } from '@rushstack/node-core-library';\n\n// TODO: Integrate these into the AnsiEscape API in @rushstack/node-core-library\n// As part of that work we should generalize the \"Colors\" API to support more general\n// terminal escapes, and simplify the interface for that API.\nconst ANSI_ESCAPE_SHOW_CURSOR: string = '\\u001B[?25l';\nconst ANSI_ESCAPE_HIDE_CURSOR: string = '\\u001B[?25h';\n\nexport class KeyboardLoop {\n  protected stdin: NodeJS.ReadStream;\n  protected stderr: NodeJS.WriteStream;\n  private _readlineInterface: readline.Interface | undefined;\n  private _resolvePromise: (() => void) | undefined;\n  private _rejectPromise: ((error: Error) => void) | undefined;\n  private _cursorHidden: boolean = false;\n\n  public constructor() {\n    this.stdin = process.stdin;\n    this.stderr = process.stderr;\n  }\n\n  public get capturedInput(): boolean {\n    return this._readlineInterface !== undefined;\n  }\n\n  private _captureInput(): void {\n    if (this._readlineInterface) {\n      return;\n    }\n\n    this._readlineInterface = readline.createInterface({ input: this.stdin });\n\n    readline.emitKeypressEvents(process.stdin);\n    this.stdin.setRawMode!(true);\n    this.stdin.addListener('keypress', this._onKeypress);\n  }\n\n  private _uncaptureInput(): void {\n    if (!this._readlineInterface) {\n      return;\n    }\n\n    this.stdin.removeListener('keypress', this._onKeypress);\n    this.stdin.setRawMode!(false);\n    this._readlineInterface.close();\n    this._readlineInterface = undefined;\n  }\n\n  protected hideCursor(): void {\n    if (this._cursorHidden) {\n      return;\n    }\n    this._cursorHidden = true;\n    this.stderr.write(ANSI_ESCAPE_SHOW_CURSOR);\n  }\n\n  protected unhideCursor(): void {\n    if (!this._cursorHidden) {\n      return;\n    }\n    this._cursorHidden = false;\n    this.stderr.write(ANSI_ESCAPE_HIDE_CURSOR);\n  }\n\n  public async startAsync(): Promise<void> {\n    try {\n      this._captureInput();\n      this.onStart();\n      await new Promise<void>((resolve: () => void, reject: (error: Error) => void) => {\n        this._resolvePromise = resolve;\n        this._rejectPromise = reject;\n      });\n    } finally {\n      this._uncaptureInput();\n      this.unhideCursor();\n    }\n  }\n\n  protected resolveAsync(): void {\n    if (!this._resolvePromise) {\n      return;\n    }\n    this._resolvePromise();\n    this._resolvePromise = undefined;\n    this._rejectPromise = undefined;\n  }\n\n  protected rejectAsync(error: Error): void {\n    if (!this._rejectPromise) {\n      return;\n    }\n    this._rejectPromise(error);\n    this._resolvePromise = undefined;\n    this._rejectPromise = undefined;\n  }\n\n  /** @virtual */\n  protected onStart(): void {}\n\n  /** @virtual */\n  protected onKeypress(character: string, key: readline.Key): void {}\n\n  private _onKeypress = (character: string, key: readline.Key): void => {\n    if (key.name === 'c' && key.ctrl && !key.meta && !key.shift) {\n      // Intercept CTRL+C\n      process.kill(process.pid, 'SIGINT');\n      return;\n    }\n    try {\n      this.onKeypress(character, key);\n    } catch (error) {\n      throw new InternalError('Uncaught exception in Prompter.onKeypress(): ' + (error as Error).toString());\n    }\n  };\n}\n"]}