{"version":3,"file":"Autoinstaller.js","sourceRoot":"","sources":["../../src/logic/Autoinstaller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as path from 'path';\n\nimport { FileSystem, IPackageJson, JsonFile, LockFile, NewlineKind } from '@rushstack/node-core-library';\nimport { Utilities } from '../utilities/Utilities';\n\nimport { PackageName, IParsedPackageNameOrError } from '@rushstack/node-core-library';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { PackageJsonEditor } from '../api/PackageJsonEditor';\nimport { InstallHelpers } from './installManager/InstallHelpers';\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport { RushConstants } from './RushConstants';\nimport { LastInstallFlag } from '../api/LastInstallFlag';\n\nexport class Autoinstaller {\n  public name: string;\n\n  private _rushConfiguration: RushConfiguration;\n\n  public constructor(autoinstallerName: string, rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n    Autoinstaller.validateName(autoinstallerName);\n    this.name = autoinstallerName;\n  }\n\n  // Example: .../common/autoinstallers/my-task\n  public get folderFullPath(): string {\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name);\n  }\n\n  // Example: .../common/autoinstallers/my-task/package-lock.yaml\n  public get shrinkwrapFilePath(): string {\n    return path.join(\n      this._rushConfiguration.commonAutoinstallersFolder,\n      this.name,\n      this._rushConfiguration.shrinkwrapFilename\n    );\n  }\n\n  // Example: .../common/autoinstallers/my-task/package.json\n  public get packageJsonPath(): string {\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name, 'package.json');\n  }\n\n  public static validateName(autoinstallerName: string): void {\n    const nameOrError: IParsedPackageNameOrError = PackageName.tryParse(autoinstallerName);\n    if (nameOrError.error) {\n      throw new Error(`The specified name \"${autoinstallerName}\" is invalid: ` + nameOrError.error);\n    }\n    if (nameOrError.scope) {\n      throw new Error(`The specified name \"${autoinstallerName}\" must not contain an NPM scope`);\n    }\n  }\n\n  public async prepareAsync(): Promise<void> {\n    const autoinstallerFullPath: string = this.folderFullPath;\n\n    if (!FileSystem.exists(autoinstallerFullPath)) {\n      throw new Error(\n        `The autoinstaller ${this.name} does not exist, Please run\\nrush init-autoinstaller --name ${this.name}\\n`\n      );\n    }\n\n    const rushGlobalFolder: RushGlobalFolder = new RushGlobalFolder();\n    await InstallHelpers.ensureLocalPackageManager(\n      this._rushConfiguration,\n      rushGlobalFolder,\n      RushConstants.defaultMaxInstallAttempts\n    );\n\n    // Example: common/autoinstallers/my-task/package.json\n    const relativePathForLogs: string = path.relative(\n      this._rushConfiguration.rushJsonFolder,\n      autoinstallerFullPath\n    );\n\n    console.log(`Acquiring lock for \"${relativePathForLogs}\" folder...`);\n\n    const lock: LockFile = await LockFile.acquire(autoinstallerFullPath, 'autoinstaller');\n\n    // Example: .../common/autoinstallers/my-task/.rush/temp\n    const lastInstallFlagPath: string = path.join(\n      autoinstallerFullPath,\n      RushConstants.projectRushFolderName,\n      'temp'\n    );\n\n    const packageJsonPath: string = path.join(autoinstallerFullPath, 'package.json');\n    const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\n\n    const lastInstallFlag: LastInstallFlag = new LastInstallFlag(lastInstallFlagPath, {\n      node: process.versions.node,\n      packageManager: this._rushConfiguration.packageManager,\n      packageManagerVersion: this._rushConfiguration.packageManagerToolVersion,\n      packageJson: packageJson\n    });\n\n    if (!lastInstallFlag.isValid() || lock.dirtyWhenAcquired) {\n      // Example: ../common/autoinstallers/my-task/node_modules\n      const nodeModulesFolder: string = path.join(autoinstallerFullPath, 'node_modules');\n\n      if (FileSystem.exists(nodeModulesFolder)) {\n        console.log('Deleting old files from ' + nodeModulesFolder);\n        FileSystem.ensureEmptyFolder(nodeModulesFolder);\n      }\n\n      // Copy: .../common/autoinstallers/my-task/.npmrc\n      Utilities.syncNpmrc(this._rushConfiguration.commonRushConfigFolder, autoinstallerFullPath);\n\n      console.log(`Installing dependencies under ${autoinstallerFullPath}...\\n`);\n\n      Utilities.executeCommand({\n        command: this._rushConfiguration.packageManagerToolFilename,\n        args: ['install', '--frozen-lockfile'],\n        workingDirectory: autoinstallerFullPath,\n        keepEnvironment: true\n      });\n\n      // Create file: ../common/autoinstallers/my-task/.rush/temp/last-install.flag\n      lastInstallFlag.create();\n\n      console.log('Auto install completed successfully\\n');\n    } else {\n      console.log('Autoinstaller folder is already up to date\\n');\n    }\n\n    lock.release();\n  }\n\n  public update(): void {\n    const autoinstallerPackageJsonPath: string = path.join(this.folderFullPath, 'package.json');\n\n    if (!FileSystem.exists(autoinstallerPackageJsonPath)) {\n      throw new Error(`The specified autoinstaller path does not exist: ` + autoinstallerPackageJsonPath);\n    }\n\n    console.log(`Updating autoinstaller package: ${autoinstallerPackageJsonPath}`);\n\n    let oldFileContents: string = '';\n\n    if (FileSystem.exists(this.shrinkwrapFilePath)) {\n      oldFileContents = FileSystem.readFile(this.shrinkwrapFilePath, { convertLineEndings: NewlineKind.Lf });\n      console.log('Deleting ' + this.shrinkwrapFilePath);\n      FileSystem.deleteFile(this.shrinkwrapFilePath);\n    }\n\n    // Detect a common mistake where PNPM prints \"Already up-to-date\" without creating a shrinkwrap file\n    const packageJsonEditor: PackageJsonEditor = PackageJsonEditor.load(this.packageJsonPath);\n    if (packageJsonEditor.dependencyList.length === 0 && packageJsonEditor.dependencyList.length === 0) {\n      throw new Error(\n        'You must add at least one dependency to the autoinstaller package' +\n          ' before invoking this command:\\n' +\n          this.packageJsonPath\n      );\n    }\n\n    console.log();\n\n    Utilities.syncNpmrc(this._rushConfiguration.commonRushConfigFolder, this.folderFullPath);\n\n    Utilities.executeCommand({\n      command: this._rushConfiguration.packageManagerToolFilename,\n      args: ['install'],\n      workingDirectory: this.folderFullPath,\n      keepEnvironment: true\n    });\n\n    console.log();\n\n    if (this._rushConfiguration.packageManager === 'npm') {\n      console.log(colors.bold('Running \"npm shrinkwrap\"...'));\n      Utilities.executeCommand({\n        command: this._rushConfiguration.packageManagerToolFilename,\n        args: ['shrinkwrap'],\n        workingDirectory: this.folderFullPath,\n        keepEnvironment: true\n      });\n      console.log('\"npm shrinkwrap\" completed');\n      console.log();\n    }\n\n    if (!FileSystem.exists(this.shrinkwrapFilePath)) {\n      throw new Error(\n        'The package manager did not create the expected shrinkwrap file: ' + this.shrinkwrapFilePath\n      );\n    }\n\n    const newFileContents: string = FileSystem.readFile(this.shrinkwrapFilePath, {\n      convertLineEndings: NewlineKind.Lf\n    });\n    if (oldFileContents !== newFileContents) {\n      console.log(\n        colors.green('The shrinkwrap file has been updated.') + '  Please commit the updated file:'\n      );\n      console.log(`\\n  ${this.shrinkwrapFilePath}`);\n    } else {\n      console.log(colors.green('Already up to date.'));\n    }\n  }\n}\n"]}