{"version":3,"file":"PhasedScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/PhasedScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport colors from 'colors/safe';\n\nimport { AlreadyReportedError, Terminal } from '@rushstack/node-core-library';\nimport { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\n\nimport { Event } from '../../index';\nimport { SetupChecks } from '../../logic/SetupChecks';\nimport { Stopwatch, StopwatchState } from '../../utilities/Stopwatch';\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\nimport {\n  ITaskExecutionManagerOptions,\n  TaskExecutionManager\n} from '../../logic/taskExecution/TaskExecutionManager';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\nimport { SelectionParameterSet } from '../SelectionParameterSet';\nimport { CommandLineConfiguration, IPhase, IPhasedCommand } from '../../api/CommandLineConfiguration';\nimport { IProjectTaskSelectorOptions, ProjectTaskSelector } from '../../logic/ProjectTaskSelector';\nimport { IFlagParameterJson } from '../../api/CommandLineJson';\nimport { Selection } from '../../logic/Selection';\n\n/**\n * Constructor parameters for BulkScriptAction.\n */\nexport interface IPhasedScriptActionOptions extends IBaseScriptActionOptions<IPhasedCommand> {\n  enableParallelism: boolean;\n  incremental: boolean;\n  watchForChanges: boolean;\n  disableBuildCache: boolean;\n\n  actionPhases: string[];\n  phases: Map<string, IPhase>;\n}\n\ninterface IExecuteInternalOptions {\n  taskSelectorOptions: IProjectTaskSelectorOptions;\n  taskExecutionManagerOptions: ITaskExecutionManagerOptions;\n  stopwatch: Stopwatch;\n  ignoreHooks?: boolean;\n  terminal: Terminal;\n}\n\n/**\n * This class implements bulk commands which are run individually for each project in the repo,\n * possibly in parallel. The task selector is abstract and is implemented for phased or non-phased\n * commands.\n *\n * @remarks\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\n * execute scripts from package.json in the same as any custom command.\n */\nexport class PhasedScriptAction extends BaseScriptAction<IPhasedCommand> {\n  private readonly _enableParallelism: boolean;\n  private readonly _isIncrementalBuildAllowed: boolean;\n  private readonly _watchForChanges: boolean;\n  private readonly _disableBuildCache: boolean;\n  private readonly _repoCommandLineConfiguration: CommandLineConfiguration;\n  private readonly _actionPhases: string[];\n  private readonly _phases: Map<string, IPhase>;\n\n  private _changedProjectsOnly!: CommandLineFlagParameter;\n  private _selectionParameters!: SelectionParameterSet;\n  private _verboseParameter!: CommandLineFlagParameter;\n  private _parallelismParameter: CommandLineStringParameter | undefined;\n  private _ignoreHooksParameter!: CommandLineFlagParameter;\n\n  public constructor(options: IPhasedScriptActionOptions) {\n    super(options);\n    this._enableParallelism = options.enableParallelism;\n    this._isIncrementalBuildAllowed = options.incremental;\n    this._watchForChanges = options.watchForChanges;\n    this._disableBuildCache = options.disableBuildCache;\n    this._repoCommandLineConfiguration = options.commandLineConfiguration;\n    this._actionPhases = options.actionPhases;\n    this._phases = options.phases;\n  }\n\n  public async runAsync(): Promise<void> {\n    // TODO: Replace with last-install.flag when \"rush link\" and \"rush unlink\" are deprecated\n    const lastLinkFlag: LastLinkFlag = LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration);\n    if (!lastLinkFlag.isValid()) {\n      const useWorkspaces: boolean =\n        this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\n      if (useWorkspaces) {\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush install\" or \"rush update\"?`);\n      } else {\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush link\"?`);\n      }\n    }\n\n    this._doBeforeTask();\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const isQuietMode: boolean = !this._verboseParameter.value;\n    const isDebugMode: boolean = !!this.parser.isDebug;\n\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\n    // if parallelism is not enabled, then restrict to 1 core\n    const parallelism: string | undefined = this._enableParallelism ? this._parallelismParameter!.value : '1';\n\n    const changedProjectsOnly: boolean = this._isIncrementalBuildAllowed && this._changedProjectsOnly.value;\n\n    const terminal: Terminal = new Terminal(this.rushSession.terminalProvider);\n    let buildCacheConfiguration: BuildCacheConfiguration | undefined;\n    if (!this._disableBuildCache) {\n      buildCacheConfiguration = await BuildCacheConfiguration.tryLoadAsync(\n        terminal,\n        this.rushConfiguration,\n        this.rushSession\n      );\n    }\n\n    const projectSelection: Set<RushConfigurationProject> =\n      await this._selectionParameters.getSelectedProjectsAsync(terminal);\n\n    if (!projectSelection.size) {\n      terminal.writeLine(colors.yellow(`The command line selection parameters did not match any projects.`));\n      return;\n    }\n\n    const phasesToRun: Set<string> = new Set(this._actionPhases);\n    for (const parameter of this.command.associatedParameters) {\n      if (parameter.parameterKind === 'flag') {\n        if (this.getFlagParameter(parameter.longName)!.value) {\n          const flagParameter: IFlagParameterJson = parameter as IFlagParameterJson;\n          if (flagParameter.addPhasesToCommand) {\n            for (const phase of flagParameter.addPhasesToCommand) {\n              phasesToRun.add(phase);\n            }\n          }\n\n          if (flagParameter.skipPhasesForCommand) {\n            for (const phase of flagParameter.skipPhasesForCommand) {\n              phasesToRun.delete(phase);\n            }\n          }\n        }\n      }\n    }\n\n    const taskSelectorOptions: IProjectTaskSelectorOptions = {\n      rushConfiguration: this.rushConfiguration,\n      buildCacheConfiguration,\n      projectSelection,\n      isQuietMode: isQuietMode,\n      isDebugMode: isDebugMode,\n      isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,\n      customParameters: this.customParameters,\n      phasesToRun: phasesToRun,\n      phases: this._phases\n    };\n\n    const taskExecutionManagerOptions: ITaskExecutionManagerOptions = {\n      quietMode: isQuietMode,\n      debugMode: this.parser.isDebug,\n      parallelism: parallelism,\n      changedProjectsOnly: changedProjectsOnly,\n      repoCommandLineConfiguration: this._repoCommandLineConfiguration\n    };\n\n    const executeOptions: IExecuteInternalOptions = {\n      taskSelectorOptions,\n      taskExecutionManagerOptions: taskExecutionManagerOptions,\n      stopwatch,\n      terminal\n    };\n\n    if (this._watchForChanges) {\n      await this._runWatch(executeOptions);\n    } else {\n      await this._runOnce(executeOptions);\n    }\n  }\n\n  /**\n   * Runs the command in watch mode. Fundamentally is a simple loop:\n   * 1) Wait for a change to one or more projects in the selection (skipped initially)\n   * 2) Invoke the command on the changed projects, and, if applicable, impacted projects\n   *    Uses the same algorithm as --impacted-by\n   * 3) Goto (1)\n   */\n  private async _runWatch(options: IExecuteInternalOptions): Promise<void> {\n    const {\n      taskSelectorOptions: { projectSelection: projectsToWatch },\n      stopwatch,\n      terminal\n    } = options;\n\n    // Use async import so that we don't pay the cost for sync builds\n    const { ProjectWatcher } = await import('../../logic/ProjectWatcher');\n\n    const projectWatcher: typeof ProjectWatcher.prototype = new ProjectWatcher({\n      debounceMilliseconds: 1000,\n      rushConfiguration: this.rushConfiguration,\n      projectsToWatch,\n      terminal\n    });\n\n    const onWatchingFiles = (): void => {\n      // Report so that the developer can always see that it is in watch mode as the latest console line.\n      terminal.writeLine(\n        `Watching for changes to ${projectsToWatch.size} ${\n          projectsToWatch.size === 1 ? 'project' : 'projects'\n        }. Press Ctrl+C to exit.`\n      );\n    };\n\n    // Loop until Ctrl+C\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // On the initial invocation, this promise will return immediately with the full set of projects\n      const { changedProjects, state } = await projectWatcher.waitForChange(onWatchingFiles);\n\n      if (stopwatch.state === StopwatchState.Stopped) {\n        // Clear and reset the stopwatch so that we only report time from a single execution at a time\n        stopwatch.reset();\n        stopwatch.start();\n      }\n\n      terminal.writeLine(\n        `Detected changes in ${changedProjects.size} project${changedProjects.size === 1 ? '' : 's'}:`\n      );\n      const names: string[] = [...changedProjects].map((x) => x.packageName).sort();\n      for (const name of names) {\n        terminal.writeLine(`    ${colors.cyan(name)}`);\n      }\n\n      // Account for consumer relationships\n      const projectSelection: Set<RushConfigurationProject> = Selection.intersection(\n        Selection.expandAllConsumers(changedProjects),\n        projectsToWatch\n      );\n\n      const executeOptions: IExecuteInternalOptions = {\n        taskSelectorOptions: {\n          ...options.taskSelectorOptions,\n          // Revise down the set of projects to execute the command on\n          projectSelection,\n          // Pass the ProjectChangeAnalyzer from the state differ to save a bit of overhead\n          projectChangeAnalyzer: state\n        },\n        taskExecutionManagerOptions: options.taskExecutionManagerOptions,\n        stopwatch,\n        // For now, don't run pre-build or post-build in watch mode\n        ignoreHooks: true,\n        terminal\n      };\n\n      try {\n        // Delegate the the underlying command, for only the projects that need reprocessing\n        await this._runOnce(executeOptions);\n      } catch (err) {\n        // In watch mode, we want to rebuild even if the original build failed.\n        if (!(err instanceof AlreadyReportedError)) {\n          throw err;\n        }\n      }\n    }\n  }\n\n  protected onDefineParameters(): void {\n    if (this._enableParallelism) {\n      this._parallelismParameter = this.defineStringParameter({\n        parameterLongName: '--parallelism',\n        parameterShortName: '-p',\n        argumentName: 'COUNT',\n        environmentVariable: EnvironmentVariableNames.RUSH_PARALLELISM,\n        description:\n          'Specifies the maximum number of concurrent processes to launch during a build.' +\n          ' The COUNT should be a positive integer or else the word \"max\" to specify a count that is equal to' +\n          ' the number of CPU cores. If this parameter is omitted, then the default value depends on the' +\n          ' operating system and number of CPU cores.'\n      });\n    }\n\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this, {\n      // Include lockfile processing since this expands the selection, and we need to select\n      // at least the same projects selected with the same query to \"rush build\"\n      includeExternalDependencies: true,\n      // Enable filtering to reduce evaluation cost\n      enableFiltering: true\n    });\n\n    this._verboseParameter = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      parameterShortName: '-v',\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\n    });\n\n    if (this._isIncrementalBuildAllowed) {\n      this._changedProjectsOnly = this.defineFlagParameter({\n        parameterLongName: '--changed-projects-only',\n        parameterShortName: '-c',\n        description:\n          'Normally the incremental build logic will rebuild changed projects as well as' +\n          ' any projects that directly or indirectly depend on a changed project. Specify \"--changed-projects-only\"' +\n          ' to ignore dependent projects, only rebuilding those projects whose files were changed.' +\n          ' Note that this parameter is \"unsafe\"; it is up to the developer to ensure that the ignored projects' +\n          ' are okay to ignore.'\n      });\n    }\n\n    this._ignoreHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-hooks',\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\n    });\n\n    this.defineScriptParameters();\n  }\n\n  /**\n   * Runs a single invocation of the command\n   */\n  private async _runOnce(options: IExecuteInternalOptions): Promise<void> {\n    const taskSelector: ProjectTaskSelector = new ProjectTaskSelector(options.taskSelectorOptions);\n\n    // Register all tasks with the task collection\n\n    const taskExecutionManager: TaskExecutionManager = new TaskExecutionManager(\n      taskSelector.registerTasks().getOrderedTasks(),\n      options.taskExecutionManagerOptions\n    );\n\n    const { ignoreHooks, stopwatch } = options;\n\n    try {\n      await taskExecutionManager.executeAsync();\n\n      stopwatch.stop();\n      console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));\n\n      if (!ignoreHooks) {\n        this._doAfterTask(stopwatch, true);\n      }\n    } catch (error) {\n      stopwatch.stop();\n\n      if (error instanceof AlreadyReportedError) {\n        console.log(`rush ${this.actionName} (${stopwatch.toString()})`);\n      } else {\n        if (error && (error as Error).message) {\n          if (this.parser.isDebug) {\n            console.log('Error: ' + (error as Error).stack);\n          } else {\n            console.log('Error: ' + (error as Error).message);\n          }\n        }\n\n        console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\n      }\n\n      if (!ignoreHooks) {\n        this._doAfterTask(stopwatch, false);\n      }\n      throw new AlreadyReportedError();\n    }\n  }\n\n  private _doBeforeTask(): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in tasks like build or rebuild.\n      return;\n    }\n\n    SetupChecks.validate(this.rushConfiguration);\n\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n\n  private _doAfterTask(stopwatch: Stopwatch, success: boolean): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in tasks like build or rebuild.\n      return;\n    }\n    this._collectTelemetry(stopwatch, success);\n    this.parser.flushTelemetry();\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\n    const extraData: Record<string, string> = {\n      ...this._selectionParameters.getTelemetry(),\n      ...this.getParameterStringMap()\n    };\n\n    if (this.parser.telemetry) {\n      this.parser.telemetry.log({\n        name: this.actionName,\n        duration: stopwatch.duration,\n        result: success ? 'Succeeded' : 'Failed',\n        extraData\n      });\n    }\n  }\n}\n"]}