"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListAction = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const BaseRushAction_1 = require("./BaseRushAction");
const VersionPolicy_1 = require("../../api/VersionPolicy");
const SelectionParameterSet_1 = require("../SelectionParameterSet");
const cliTable = node_core_library_1.Import.lazy('cli-table', require);
class ListAction extends BaseRushAction_1.BaseRushAction {
    constructor(parser) {
        super({
            actionName: 'list',
            summary: 'List package information for all projects in the repo',
            documentation: 'List package names, and optionally version (--version) and ' +
                'path (--path) or full path (--full-path), for projects in the ' +
                'current rush config.',
            parser,
            safeForSimultaneousRushProcesses: true
        });
    }
    onDefineParameters() {
        this._version = this.defineFlagParameter({
            parameterLongName: '--version',
            parameterShortName: '-v',
            description: 'If this flag is specified, the project version will be ' +
                'displayed in a column along with the package name.'
        });
        this._path = this.defineFlagParameter({
            parameterLongName: '--path',
            parameterShortName: '-p',
            description: 'If this flag is specified, the project path will be ' +
                'displayed in a column along with the package name.'
        });
        this._fullPath = this.defineFlagParameter({
            parameterLongName: '--full-path',
            description: 'If this flag is specified, the project full path will ' +
                'be displayed in a column along with the package name.'
        });
        this._detailedFlag = this.defineFlagParameter({
            parameterLongName: '--detailed',
            description: 'For the non --json view, if this flag is specified, ' +
                'include path (-p), version (-v) columns along with ' +
                "the project's applicable: versionPolicy, versionPolicyName, " +
                'shouldPublish, and reviewPolicy fields.'
        });
        this._jsonFlag = this.defineFlagParameter({
            parameterLongName: '--json',
            description: 'If this flag is specified, output will be in JSON format.'
        });
        this._selectionParameters = new SelectionParameterSet_1.SelectionParameterSet(this.rushConfiguration, this, {
            // Include lockfile processing since this expands the selection, and we need to select
            // at least the same projects selected with the same query to "rush build"
            includeExternalDependencies: true,
            // Disable filtering because rush-project.json is riggable and therefore may not be available
            enableFiltering: false
        });
    }
    async runAsync() {
        const terminal = new node_core_library_1.Terminal(new node_core_library_1.ConsoleTerminalProvider());
        const selection = await this._selectionParameters.getSelectedProjectsAsync(terminal);
        node_core_library_1.Sort.sortSetBy(selection, (x) => x.packageName);
        if (this._jsonFlag.value && this._detailedFlag.value) {
            throw new Error(`The parameters "--json" and "--detailed" cannot be used together.`);
        }
        if (this._jsonFlag.value) {
            this._printJson(selection);
        }
        else if (this._version.value || this._path.value || this._fullPath.value || this._detailedFlag.value) {
            this._printListTable(selection);
        }
        else {
            this._printList(selection);
        }
    }
    _printJson(selection) {
        const projects = Array.from(selection, (config) => {
            let reviewCategory;
            let shouldPublish;
            let versionPolicy;
            let versionPolicyName;
            if (config.versionPolicy !== undefined) {
                const definitionName = VersionPolicy_1.VersionPolicyDefinitionName[config.versionPolicy.definitionName];
                versionPolicy = `${definitionName}`;
                versionPolicyName = config.versionPolicy.policyName;
            }
            else {
                shouldPublish = config.shouldPublish;
            }
            if (config.reviewCategory) {
                reviewCategory = config.reviewCategory;
            }
            return {
                name: config.packageName,
                version: config.packageJson.version,
                path: config.projectRelativeFolder,
                fullPath: config.projectFolder,
                versionPolicy,
                versionPolicyName,
                shouldPublish,
                reviewCategory
            };
        });
        const output = {
            projects
        };
        console.log(JSON.stringify(output, undefined, 2));
    }
    _printList(selection) {
        for (const project of selection) {
            console.log(project.packageName);
        }
    }
    _printListTable(selection) {
        const tableHeader = ['Project'];
        if (this._version.value || this._detailedFlag.value) {
            tableHeader.push('Version');
        }
        if (this._path.value || this._detailedFlag.value) {
            tableHeader.push('Path');
        }
        if (this._fullPath.value) {
            tableHeader.push('Full Path');
        }
        if (this._detailedFlag.value) {
            tableHeader.push('Version policy');
            tableHeader.push('Version policy name');
            tableHeader.push('Should publish');
            tableHeader.push('Review category');
        }
        // eslint-disable-next-line @typescript-eslint/typedef
        const table = new cliTable({
            head: tableHeader
        });
        for (const project of selection) {
            const packageRow = [project.packageName];
            if (this._version.value || this._detailedFlag.value) {
                packageRow.push(project.packageJson.version);
            }
            if (this._path.value || this._detailedFlag.value) {
                packageRow.push(project.projectRelativeFolder);
            }
            if (this._fullPath.value) {
                packageRow.push(project.projectFolder);
            }
            if (this._detailedFlag.value) {
                // When we HAVE a version policy
                let versionPolicyDefinitionName = '';
                let versionPolicyName = '';
                // When we DO NOT have version policy, fallback to shouldPublish boolean
                let shouldPublish = '';
                let reviewCategory = '';
                if (project.versionPolicy !== undefined) {
                    const definitionName = VersionPolicy_1.VersionPolicyDefinitionName[project.versionPolicy.definitionName];
                    versionPolicyDefinitionName = definitionName;
                    versionPolicyName = project.versionPolicy.policyName;
                }
                else {
                    shouldPublish = `${String(project.shouldPublish)}`;
                }
                if (project.reviewCategory) {
                    reviewCategory = project.reviewCategory;
                }
                packageRow.push(versionPolicyDefinitionName);
                packageRow.push(versionPolicyName);
                packageRow.push(shouldPublish);
                packageRow.push(reviewCategory);
            }
            table.push(packageRow);
        }
        console.log(table.toString());
    }
}
exports.ListAction = ListAction;
//# sourceMappingURL=ListAction.js.map