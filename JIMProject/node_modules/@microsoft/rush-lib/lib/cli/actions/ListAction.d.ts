import { BaseRushAction } from './BaseRushAction';
import { RushCommandLineParser } from '../RushCommandLineParser';
/**
 * Shape of "rush list --json" output.
 *
 * It contains parts (with different names) coming from
 * {@link ../../api/RushConfigurationProject#IRushConfigurationProjectJson | IRushConfigurationProjectJson}.
 */
export interface IJsonEntry {
    name: string;
    version: string;
    /**
     * @see {@link ../../api/RushConfigurationProject#IRushConfigurationProjectJson.publishFolder | IRushConfigurationProjectJson.publishFolder}
     */
    path: string;
    fullPath: string;
    /**
     * @see {@link ../../api/RushConfigurationProject#IRushConfigurationProjectJson.versionPolicyName | IRushConfigurationProjectJson.versionPolicyName}
     */
    versionPolicyName?: string;
    /**
     * @see {@link ../../api/VersionPolicy#VersionPolicyDefinitionName | VersionPolicyDefinitionName}
     */
    versionPolicy?: string;
    /**
     * @see {@link ../../api/RushConfigurationProject#IRushConfigurationProjectJson.shouldPublish | IRushConfigurationProjectJson.shouldPublish}
     */
    shouldPublish?: boolean;
    /**
     * @see {@link ../../api/RushConfigurationProject#IRushConfigurationProjectJson.reviewCategory | IRushConfigurationProjectJson.reviewCategory}
     */
    reviewCategory?: string;
}
export interface IJsonOutput {
    projects: IJsonEntry[];
}
export declare class ListAction extends BaseRushAction {
    private _version;
    private _path;
    private _fullPath;
    private _jsonFlag;
    private _detailedFlag;
    private _selectionParameters;
    constructor(parser: RushCommandLineParser);
    protected onDefineParameters(): void;
    protected runAsync(): Promise<void>;
    private _printJson;
    private _printList;
    private _printListTable;
}
//# sourceMappingURL=ListAction.d.ts.map