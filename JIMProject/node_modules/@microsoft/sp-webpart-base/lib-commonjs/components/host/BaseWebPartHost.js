"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseWebPartHost = void 0;
var tslib_1 = require("tslib");
/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_edit_customer_promise_1 = require("@ms/sp-edit-customer-promise");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var KillSwitches_1 = tslib_1.__importDefault(require("../../common/KillSwitches"));
/**
 * BaseWebPartHost implements the IWebPartHost lifecycle methods as virtual no-op methods.
 *
 * @internal
 */
var BaseWebPartHost = /** @class */ (function () {
    function BaseWebPartHost(serviceScope) {
        this.serviceScope = serviceScope;
    }
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartLoad = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.load(" + options.webPartTag + ").start");
        sp_telemetry_1._PerformanceLogger.startMarkForComponent(options.webPartTag);
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartLoad = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.load(" + options.webPartTag + ").end");
        sp_telemetry_1._PerformanceLogger.markComponentModuleLoaded(options.webPartTag);
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartLoadFailed = function (options, error) {
        sp_telemetry_1._PerformanceLogger.endFailureForComponent(options.webPartTag, 'Load', error);
        if (options.displayMode === sp_core_library_1.DisplayMode.Edit && !!options.manifest.isInternal && !!options.serviceScope) {
            this._logFailuresForEditCustomerPromise(options.manifest.alias, error, 'Load', options.serviceScope);
        }
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartInitializeOld = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").start");
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartInitialize = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").start");
        return Promise.resolve();
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartInitialize = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").end");
        return;
    };
    BaseWebPartHost.prototype.onAfterWebPartInitializeFailed = function (options, error) {
        sp_telemetry_1._PerformanceLogger.endFailureForComponent(options.webPartTag, 'Initialize', error);
        if (options.displayMode === sp_core_library_1.DisplayMode.Edit && !!options.manifest.isInternal && !!options.serviceScope) {
            this._logFailuresForEditCustomerPromise(options.manifest.alias, error, 'Initialize', options.serviceScope);
        }
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartRender = function (options) {
        sp_telemetry_1._PerformanceLogger.devMark("ClientSideWebPartManager.render(" + options.webPartTag + ").start");
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartRender = function (options) {
        if (!KillSwitches_1.default.isResolveRenderTimeActivated() && typeof options.renderCompleteTime === 'number') {
            sp_telemetry_1._PerformanceLogger.endMarkForComponentWithTimestamp(options.webPartTag, options.renderCompleteTime);
        }
        else {
            sp_telemetry_1._PerformanceLogger.endMarkForComponent(options.webPartTag);
        }
        return;
    };
    BaseWebPartHost.prototype.onAfterWebPartRenderFailed = function (options, error) {
        sp_telemetry_1._PerformanceLogger.endFailureForComponent(options.webPartTag, 'Render', error);
        if (options.displayMode === sp_core_library_1.DisplayMode.Edit && !!options.manifest.isInternal && !!options.serviceScope) {
            this._logFailuresForEditCustomerPromise(options.manifest.alias, error, 'Render', options.serviceScope);
        }
        return;
    };
    BaseWebPartHost.prototype._logFailuresForEditCustomerPromise = function (alias, error, errorScenario, serviceScope) {
        var errorDetails = {
            errorCode: "WebPartBase " + alias + " Failure",
            errorMessage: error.message,
            errorScenario: errorScenario
        };
        sp_edit_customer_promise_1._logFailuresForEditCustomerPromise(errorDetails, serviceScope);
    };
    return BaseWebPartHost;
}());
exports.BaseWebPartHost = BaseWebPartHost;
//# sourceMappingURL=BaseWebPartHost.js.map